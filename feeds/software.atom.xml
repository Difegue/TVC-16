<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blogopolis - Software</title><link href="https://tvc-16.science/" rel="alternate"></link><link href="https://tvc-16.science/feeds/software.atom.xml" rel="self"></link><id>https://tvc-16.science/</id><updated>2024-12-21T00:00:00+01:00</updated><entry><title>DialogueForest is now on the Microsoft Store!</title><link href="https://tvc-16.science/dialogueforest-msstore.html" rel="alternate"></link><published>2024-12-21T00:00:00+01:00</published><updated>2024-12-21T00:00:00+01:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2024-12-21:/dialogueforest-msstore.html</id><summary type="html">&lt;p&gt;This blogpost contains unsafe amounts of ranting against AI.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="./dialogueforest.html"&gt;A bit more than a year ago&lt;/a&gt;, I shipped DialogueForest, which had itself been in development for a year+...&lt;br&gt;
So the app is actually almost three years old now! Wow!&lt;br&gt;
&lt;img alt="DialogueForest screenshot" src="images/dialogueforest/screenshot.png"&gt;&lt;br&gt;
I don't update it that much as it's really mostly for my personal use&lt;sup id="ref-1"&gt;&lt;a href="#note-1"&gt;*&lt;/a&gt;&lt;/sup&gt;, but as the Windows App SDK runtime keeps getting updates, it was getting a bit difficult to run the executable I shipped on &lt;a href="https://difegue.itch.io/dialogueforest"&gt;itch.io&lt;/a&gt; back then.  &lt;/p&gt;
&lt;p&gt;So I solved that and added a &lt;a href="https://github.com/Difegue/DialogueForest/releases/tag/v.1.0.4"&gt;few more features&lt;/a&gt;:&lt;br&gt;
DialogueForest is now on the &lt;strong&gt;Microsoft Store&lt;/strong&gt; so you can 1-click install it, &lt;em&gt;entirely free&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://apps.microsoft.com/detail/9P7MWMG1V6M6?cid=tvc-16&amp;mode=full"&gt;
    &lt;img src="https://get.microsoft.com/images/en-us%20dark.svg" width="200"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Merry Christmas! Go write some dialogue for your games.  &lt;/p&gt;
&lt;p&gt;&lt;img width="400px" alt="i hadnt opened spline in more than a year it's still pretty fun" src="images/dialogueforest/ForestXmas.png" title="i hadnt opened spline in more than a year it's still pretty fun"&gt;&lt;/p&gt;
&lt;p&gt;... You're still here? I guess I did promise some ranting.  &lt;/p&gt;
&lt;p&gt;So one of the reasons I'd held back MS Store publishing for this app back then was...&lt;br&gt;
that I was planning to add &lt;strong&gt;AI&lt;/strong&gt; to it! 👻👻👻&lt;br&gt;
Not really because I believed in the technology &lt;sub&gt;(especially not for creative writing, miss me with that shit)&lt;/sub&gt;, but I wanted to 🧪experiment🧪 with something.  &lt;/p&gt;
&lt;p&gt;Microsoft was promising those &lt;a href="https://learn.microsoft.com/en-us/windows/ai/apis/phi-silica"&gt;shiny new WinAppSDK APIs&lt;/a&gt; in May to interact with language models that'd be bundled with Windows -- With those, it'd cost essentially &lt;em&gt;no effort or money&lt;/em&gt; to integrate text/dialogue generation in the app.  &lt;/p&gt;
&lt;p&gt;So I would put the app on the store...&lt;br&gt;
Add in the AI integration as a &lt;strong&gt;5$ paid in-app-purchase&lt;/strong&gt;...&lt;br&gt;
&lt;strong&gt;Market the app&lt;/strong&gt; as being "&lt;em&gt;enhanced by the incredible power of AI!!1!1!&lt;/em&gt;"...  &lt;br&gt;
Get &lt;a href="https://blogs.windows.com/windowsdeveloper/2023/05/23/welcoming-ai-to-the-microsoft-store-on-windows/"&gt;featured on the store&lt;/a&gt; by Microsoft who's desperate to sell that shit to everyone who has eyes...  &lt;br&gt;
And &lt;strong&gt;rack in the money&lt;/strong&gt; from the room-temperature-IQ Elon Musk fans who think a glorified autocomplete is the future of technology.  &lt;/p&gt;
&lt;p&gt;The plan was, dare I say it, perfect; I just needed to wait for the APIs to become available... 
&lt;img alt="yes this meme format is outdated and i'm immediately exposing myself as a poser for misusing it with technical bullshit terms like &amp;quot;API&amp;quot; like I'm trying to write an out of touch marketing blogpost for a big tech company IT'S PART OF THE JOKE I SWEAR" src="images/dialogueforest/gru_df.jpg"&gt;&lt;br&gt;
I honestly thought that since this was yet another of Microsoft's famous &lt;em&gt;"refocus the entire OS on a single bit of tech&lt;/em&gt;" moments, this stuff would come out relatively early despite the fact Windows UI technology/WinAppSDK moves at a glacial pace...&lt;br&gt;
But nope, &lt;code&gt;Microsoft.Windows.AI.Generative&lt;/code&gt; is still unavailable more than 6 months later.  &lt;/p&gt;
&lt;p&gt;As a result, what's the current guidance from Microsoft if I want, as a Windows developer, to join the &lt;br&gt;
""""AI Revolution""""? Well, they made a whole app about it with examples, &lt;a href="https://aka.ms/ai-dev-gallery-blog"&gt;look how nice it is&lt;/a&gt;!&lt;br&gt;
&lt;img alt="huggingface is also a terrible platform btw" src="images/dialogueforest/aidevgallery.png"&gt;&lt;br&gt;
...And it basically boils down to "&lt;em&gt;Download some shit from huggingface, slap it into your app and run the model yourself on GPU -- want language processing? That'll be an extra 2 gigabytes thank you&lt;/em&gt;"&lt;br&gt;
It's laughable, nobody's realistically going to do this??&lt;sup id="ref-2"&gt;&lt;a href="#note-2"&gt;**&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;p&gt;Even &lt;strong&gt;Apple&lt;/strong&gt;, who did the &lt;em&gt;least&lt;/em&gt; possible amount of compliance so that their shareholders wouldn't crash the stock by fear of missing the AI hype train, added &lt;a href="https://developer.apple.com/documentation/imageplayground"&gt;some tools&lt;/a&gt; for developers to use their built-in generative stuff.  &lt;/p&gt;
&lt;p&gt;It's shit, &lt;em&gt;but at least you can use it&lt;/em&gt;!&lt;br&gt;
Microsoft is one of the companies who went the hardest on dooming themselves with AI garbage,&lt;br&gt;
&lt;strong&gt;and EVEN THEN THEY CAN'T FUCKING DO IT RIGHT!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;br&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;... aight i got that out of my system we good now&lt;br&gt;
&lt;img alt="" src="images/dasitmane.jpg"&gt;&lt;br&gt;
I imagine most of the preinstalled-AI-on-Windows stuff was severely delayed by the Recall &lt;a href="https://doublepulsar.com/recall-stealing-everything-youve-ever-typed-or-viewed-on-your-own-windows-pc-is-now-possible-da3e12e9465e"&gt;trash fire&lt;/a&gt;, which is how we got to this silly situation.  &lt;/p&gt;
&lt;p&gt;I don't really blame&lt;sup id="ref-3"&gt;&lt;a href="#note-3"&gt;***&lt;/a&gt;&lt;/sup&gt; the Windows devs, this shit comes down from management and they were absolutely right to redirect their limited resources into &lt;a href="https://blogs.windows.com/windowsdeveloper/2024/09/04/whats-new-in-windows-app-sdk-1-6/"&gt;actually useful stuff&lt;/a&gt; instead of those APIs.  &lt;/p&gt;
&lt;p&gt;But well, as for my &lt;em&gt;devilish AI plan&lt;/em&gt;? The hype cycle is essentially dead by now. &lt;sub&gt;(if it was ever somewhat alive)&lt;/sub&gt;&lt;br&gt;
When you look at OpenAI trying to stir hype with their &lt;a href="https://www.theverge.com/24314146/openai-12-days-ship-mas-chatgpt-sora-o1-update"&gt;"12 days of shipmas"&lt;/a&gt; &lt;sub&gt;(terrible techbro ass name btw)&lt;/sub&gt; and delivering &lt;strong&gt;nothing of value&lt;/strong&gt;&lt;sup id="ref-4"&gt;&lt;a href="#note-4"&gt;#&lt;/a&gt;&lt;/sup&gt;, I don't see it picking back up.  &lt;/p&gt;
&lt;p&gt;There's absolutely zero incentive from me to bundle any form of AI to DialogueForest now, so I thought I might as well just &lt;a href="https://apps.microsoft.com/detail/9P7MWMG1V6M6?cid=tvc-16&amp;amp;mode=full"&gt;put it up on the Store&lt;/a&gt;. And with AOT, it's now faster, so it was worth the wait? &lt;em&gt;Kinda?&lt;/em&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;sup id="note-1"&gt;&lt;a href="#ref-1"&gt;*&lt;/a&gt; I actually haven't been using it that much recently... game writing takes time and I don't have it because I'm here ranting about how capitalistic boom/bust cycles are ruining the computer experience for everyone&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-2"&gt;&lt;a href="#ref-2"&gt;**&lt;/a&gt; I do think there's a lot of use for small bundled ML models (remember when we just called it ML? good times), but nobody is going to cram a bloody 2GB+ stable diffusion or llama model in a consumer app and call that good user experience, be realistic &lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-3"&gt;&lt;a href="#ref-3"&gt;***&lt;/a&gt; You know what I &lt;strong&gt;do&lt;/strong&gt; blame them for? &lt;a href="https://github.com/microsoft/WindowsAppSDK/issues/1808"&gt;You still can't make an x86/ARM msixbundle in one click using Visual Studio with WinAppSDK/WinUI3&lt;/a&gt;, it's been fuckbusted for ages and there's no indication as to why it fails and you have to make separate per-architecture packages instead. &lt;a href="https://www.youtube.com/watch?v=IBelvYeF440"&gt;Phenomenal&lt;/a&gt; &lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-4"&gt;&lt;a href="#ref-4"&gt;#&lt;/a&gt; Sora does not count fuck you, they closed signups 10 minutes after launching it because their servers blew up, textbook definition of a paper launch &lt;/sup&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="dotnet"></category><category term="c#"></category><category term="gamedev"></category><category term="winui"></category><category term="windows"></category><category term="windows 11"></category><category term="winappsdk"></category><category term="llms"></category><category term="outliner"></category><category term="dialogueforest"></category></entry><entry><title>The Stylophone 2.7 Update is here!</title><link href="https://tvc-16.science/stylophone-27.html" rel="alternate"></link><published>2024-09-09T00:00:00+02:00</published><updated>2024-09-09T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2024-09-09:/stylophone-27.html</id><summary type="html">&lt;p&gt;isn't it kinda stupid to make the free version the one on the platform that users tend to pay for the most?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another &lt;a href="./stylophone-26.html"&gt;year&lt;/a&gt;, another Stylophone update!&lt;br&gt;
This is a smaller update this year, but I still have a few niceties in store -- Most notably, &lt;/p&gt;
&lt;h1&gt;Mac support!&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Stylophone 2.7 on Sonoma" src="https://tvc-16.science/images/stylophone/v27-catalyst.jpg"&gt;&lt;br&gt;
As mentioned last time, the Mac Catalyst version finally works, so I took some time to "polish" it up and make it shippable.  &lt;/p&gt;
&lt;p&gt;...I say "polish" because at its heart, it's really just the iOS version thrown in Catalyst?&lt;br&gt;
There are no large Mac-only interface changes here, I'm afraid. &lt;/p&gt;
&lt;h3&gt;It's just too much gat dang work!&lt;/h3&gt;
&lt;p&gt;To make up for that though, I've decided to make the macOS version entirely 🫰&lt;strong&gt;free&lt;/strong&gt;🫰 - No need to compile it yourself or to get it from an App Store, it's just there for the taking in the &lt;a href="https://github.com/Difegue/Stylophone/releases/tag/2.7.0"&gt;GitHub releases&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I hope you have fun with it! It's signed and notarized so it should just work™️.    &lt;/p&gt;
&lt;h1&gt;The other things&lt;/h1&gt;
&lt;p&gt;For all platforms, I've mostly gone through some user asks in this release, so:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can now enable/disable specific MPD outputs through Settings&lt;/li&gt;
&lt;li&gt;You can now specify the port of the httpd stream for Local Playback  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's about it. I didn't really find anything interesting&lt;sup id="ref-1"&gt;&lt;a href="#note-1"&gt;*&lt;/a&gt;&lt;/sup&gt; in iOS17 all things considered, so the app version still just requires iOS16.  &lt;/p&gt;
&lt;p&gt;But for Windows, there's a &lt;em&gt;small bonus&lt;/em&gt;!&lt;br&gt;
You can now use the &lt;code&gt;stylophone://&lt;/code&gt; protocol on your PC to launch and control the app. See &lt;a href="https://github.com/Difegue/Stylophone#protocol-usage-windows-only"&gt;here&lt;/a&gt; for details.  &lt;/p&gt;
&lt;p&gt;This actually comes from another feature I was experimenting on; &lt;strong&gt;Widget support&lt;/strong&gt;.&lt;br&gt;
Widgets are normally a WinUI thing and &lt;a href="https://nicksnettravels.builttoroam.com/uwp-widget/"&gt;kinda suck to support on UWP&lt;/a&gt;, so I started architecting a two-app solution that could potentially become its own product...  &lt;/p&gt;
&lt;p&gt;And it worked! Except the Windows Widget pane actually &lt;a href="https://kolektiva.social/@Difegue/113076064804645110"&gt;still kinda sucks&lt;/a&gt; even with the DMA changes.&lt;br&gt;
&lt;img alt="dankpods voice: can you believe no one uses this" src="https://tvc-16.science/images/stylophone/v27-widget.jpg"&gt;&lt;br&gt;
It's all nice and good to base your widgets on &lt;a href="https://learn.microsoft.com/en-us/windows/apps/design/widgets/widgets-create-a-template"&gt;Adaptive Cards&lt;/a&gt; - except as a result you have no support for font icons, light/dark theming sucks, and all your resources need to be URLs&lt;sup id="ref-2"&gt;&lt;a href="#note-2"&gt;**&lt;/a&gt;&lt;/sup&gt;.  &lt;/p&gt;
&lt;p&gt;I don't think it's really worth doing anything with the Windows Widget board in its current state unless you're on a Microsoft payroll - Which is probably why no devs outside of Spotify have done so.  &lt;/p&gt;
&lt;p&gt;Maybe in a few years when the AI hype weans off and we start getting actual OS features again? I think Widgets could be powerful if they could be perma-anchored to the desktop like macOS does.  &lt;/p&gt;
&lt;p&gt;The well might be poisoned already though, since now everyone associates Widgets with the dogshit News features the MSN team crammed into the OS before fucking off to do Bing chat and Bing chat accessories.   &lt;/p&gt;
&lt;p&gt;In the meantime, I've made the now playing indicator a squiggly line. everyone loves squiggly lines cmon&lt;br&gt;
&lt;img alt="hell yeah" src="https://tvc-16.science/images/stylophone/v27-squiggle.png"&gt;  &lt;/p&gt;
&lt;h3&gt;As usual, the apps can be downloaded from both the &lt;a href="https://www.microsoft.com/store/apps/9NCB693428T8?cid=storebadge&amp;amp;ocid=badge"&gt;Microsoft Store&lt;/a&gt; and the &lt;a href="https://apps.apple.com/us/app/stylophone/id1644672889?itsct=apps_box_link&amp;amp;itscg=30200"&gt;App Store.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hope you enjoy the updates! Free for existing users as always. Here's the full changelog:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt; &lt;span class="n"&gt;platforms&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;listing&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;enabling&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;disabling&lt;/span&gt; &lt;span class="n"&gt;MPD&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;Local&lt;/span&gt; &lt;span class="n"&gt;Playback&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="n"&gt;crashes&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="n"&gt;happen&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;selecting&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;quickly&lt;/span&gt; &lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;search&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;macOS&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;offering&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt; &lt;span class="n"&gt;Catalyst&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Stylophone&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;freebie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Feel&lt;/span&gt; &lt;span class="k"&gt;free&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;below&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;bare minimum&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Don&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t expect much, but it&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;notarized&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;works&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;fine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;iOS&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;Local&lt;/span&gt; &lt;span class="n"&gt;Playback&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;resume&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;going&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="n"&gt;interruption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;UWP&lt;/span&gt; 
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Stylophone&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;launched&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;stylophone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;makes&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="n"&gt;invocations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Difegue&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Stylophone&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;only&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Updated&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;playing&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;marquee&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;clearer&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;playing&lt;/span&gt; &lt;span class="n"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 

&lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;full&lt;/span&gt; &lt;span class="n"&gt;changelog&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Difegue&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Stylophone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;&lt;img alt="good ol' vsmac.." src="https://tvc-16.science/images/stylophone/vsmac.png"&gt;&lt;br&gt;
Visual Studio for Mac is dead and buried as of a few days ago, but I still used it to get the iOS update out...&lt;br&gt;
Since it mostly relies on &lt;code&gt;dotnet&lt;/code&gt; these days, there's no problem using it with the latest &lt;a href="https://dotnet.microsoft.com/en-us/download/dotnet/8.0"&gt;.NET SDK&lt;/a&gt; which works just fine for buildin', debuggin', and gettin' your &lt;code&gt;.ipa&lt;/code&gt;s out.  &lt;/p&gt;
&lt;p&gt;The bitrot will probably get to it next year, but for now? I guess I can enjoy the last Microsoft IDE that doesn't have a bloody chatbot&lt;sup id="ref-3"&gt;&lt;a href="#note-3"&gt;***&lt;/a&gt;&lt;/sup&gt; built into it.  &lt;/p&gt;
&lt;p&gt;With the new action button™️ on iPhones now, I should add Shortcuts to the iOS app at some point...  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;sup id="note-1"&gt;&lt;a href="#ref-1"&gt;*&lt;/a&gt; I mentioned &lt;a href="https://bendodson.com/weblog/2023/07/26/tipkit-tutorial/"&gt;TipKit&lt;/a&gt; last time, but turns out that doesn't have any ObjC bindings so it can't be used from Xamarin.. NET9 (finally) has Swift interop support now though, so maybe next year?&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-2"&gt;&lt;a href="#ref-2"&gt;**&lt;/a&gt; Taking apart the built-in widgets shows there is &lt;strong&gt;some&lt;/strong&gt; support for reading image resources from the full app package? But it's completely undocumented so I had no idea where to start. &lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-3"&gt;&lt;a href="#ref-3"&gt;***&lt;/a&gt; I actually like base copilot for code completion not gonna lie, but the chatbot thing? meh. Where the fuck is VS2024 already? The redesign has been in preview for years at this point &lt;/sup&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="mpd"></category><category term="xamarin"></category><category term="dotnet"></category><category term="c#"></category><category term="uwp"></category><category term="windows"></category><category term="xbox"></category><category term="ios"></category><category term="macos"></category><category term="catalyst"></category><category term="app store"></category><category term="music"></category><category term="client"></category><category term="widgets"></category><category term="stylophone"></category></entry><entry><title>Compiling snapcast on macOS High Sierra</title><link href="https://tvc-16.science/snapcast-high-sierra.html" rel="alternate"></link><published>2024-01-11T00:00:00+01:00</published><updated>2024-01-11T00:00:00+01:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2024-01-11:/snapcast-high-sierra.html</id><summary type="html">&lt;p&gt;feats of compiling only dreamt of by the utterly deranged&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Happy New Year!&lt;/h3&gt;
&lt;p&gt;Here's a blogpost about fighting off bitrot so you can keep using those nice speakers your iMac ships with.  &lt;/p&gt;
&lt;p&gt;I recently got into setting up &lt;a href="https://community.home-assistant.io/t/perfect-and-free-synchronous-multiroom-audio-with-snapcast/386871"&gt;snapcast&lt;/a&gt; to play music from my NAS/MPD server across multiple rooms.&lt;br&gt;
While a part of the deranged setup is finding a way to put MPD clients&lt;sup id="ref-1"&gt;&lt;a href="#note-1"&gt;*&lt;/a&gt;&lt;/sup&gt; in multiple rooms, I also need speakers that run snapclient to play the synchronized audio from.&lt;br&gt;
&lt;img alt="snapclient running on High Sierra hell yeah" src="images/sierra-snapcast.png"&gt;&lt;br&gt;
I have an old Intel iMac running &lt;a href="https://en.wikipedia.org/wiki/MacOS_High_Sierra"&gt;macOS High Sierra&lt;/a&gt;&lt;sup id="ref-2"&gt;&lt;a href="#note-2"&gt;**&lt;/a&gt;&lt;/sup&gt; , which is both not so old that compiling modern software on it is impossible... and old enough that it becomes kind of a pain. Let's suffer together!  &lt;/p&gt;
&lt;p&gt;...Or don't, you can just grab precompiled binaries for snapcast 0.27 &lt;a href="https://github.com/Difegue/Chaotic-Realm/blob/master/snapcast-highsierra/snapcast_highsierra.zip"&gt;here.&lt;/a&gt; It's on the house!  &lt;/p&gt;
&lt;h1&gt;#include &amp;lt;filesystem&gt; aka the clangening&lt;/h1&gt;
&lt;p&gt;Just running &lt;code&gt;brew install snapcast&lt;/code&gt; on High Sierra will (currently) get you pretty far... but compiling the actual program will fail due to High Sierra's last official Apple C++ compiler &lt;a href="https://stackoverflow.com/questions/49577343/filesystem-with-c17-doesnt-work-on-my-mac-os-x-high-sierra"&gt;not supporting C++17's std::filesystem.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;You could &lt;em&gt;seemingly&lt;/em&gt; make it work with &lt;code&gt;&amp;lt;experimental/filesystem&amp;gt;&lt;/code&gt;, but I wasn't able to do it...&lt;br&gt;
So let's just &lt;strong&gt;install a new compiler&lt;/strong&gt;! I went with clang/llvm, like what's used on base macOS;&lt;br&gt;
Just installing a newer version than the stock Apple one.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew install llvm&lt;/code&gt; will &lt;strong&gt;fail&lt;/strong&gt;, but I've found that installing the previous version works, so do &lt;code&gt;brew install llvm@15&lt;/code&gt;.&lt;br&gt;
Now, how do you tell Homebrew to use this compiler instead? &lt;em&gt;I actually don't fucking know!&lt;/em&gt;&lt;br&gt;
&lt;img alt="I CAN DO ANYTHING" src="images/anything.jpg"&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/9186033/using-homebrew-with-alternate-gcc"&gt;Apparently&lt;/a&gt; you can use &lt;code&gt;HOMEBREW_CC&lt;/code&gt; and &lt;code&gt;HOMEBREW_CXX&lt;/code&gt; to set C/C++ compilers...&lt;br&gt;
But setting those variables to a path doesn't work, and setting them to &lt;code&gt;clang&lt;/code&gt;/&lt;code&gt;clang++&lt;/code&gt; just makes Homebrew keep using the default Apple compiler. (&lt;code&gt;AppleClang 10.0.0.10001044&lt;/code&gt;)    &lt;/p&gt;
&lt;p&gt;I couldn't install &lt;code&gt;gcc&lt;/code&gt; on High Sierra, so.. let's just start hacking at the &lt;a href="https://raw.githubusercontent.com/Homebrew/homebrew-core/2e5a1cad52074ef53f1ae1b73c47dafa5e1f93ad/Formula/s/snapcast.rb"&gt;snapcast formula&lt;/a&gt; instead&lt;sup id="ref-3"&gt;&lt;a href="#note-2"&gt;***&lt;/a&gt;&lt;/sup&gt; !&lt;br&gt;
You can &lt;a href="https://stackoverflow.com/questions/60082066/how-do-i-get-cmake-to-use-my-homebrew-installation-of-llvm-exclusively"&gt;override compilers&lt;/a&gt; at the &lt;code&gt;cmake&lt;/code&gt; level by using the properties &lt;code&gt;-DCMAKE_C_COMPILER&lt;/code&gt; and &lt;code&gt;-DCMAKE_CXX_COMPILER&lt;/code&gt;.  &lt;/p&gt;
&lt;h1&gt;Atomic bullshit&lt;/h1&gt;
&lt;p&gt;Modifying the formula's cmake call to be  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cmake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;std_cmake_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-DCMAKE_C_COMPILER=/usr/local/opt/llvm@15/bin/clang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-DCMAKE_CXX_COMPILER=/usr/local/opt/llvm@15/bin/clang++&amp;quot;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;uses our new compiler correctly, but then a new error rises...  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Host compiler appears to require libatomic, but cannot find it.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That one is actually pretty easy and seems to just stem from llvm &lt;a href="https://stackoverflow.com/a/64112384/1418981"&gt;&lt;em&gt;really&lt;/em&gt; wanting libatomic&lt;/a&gt;, even though it's not needed for our &lt;em&gt;spectacular snapcast shenanigans&lt;/em&gt; at all.&lt;br&gt;
Soo, what's one more argument to the cmake line, right? &lt;code&gt;"-DHAVE_CXX_ATOMICS_WITHOUT_LIB=TRUE"&lt;/code&gt; sidesteps this problem.  &lt;/p&gt;
&lt;p&gt;Are we done? No!&lt;br&gt;
&lt;img alt="" src="images/bullshit.jpg"&gt;&lt;br&gt;
After all that, I was encountering some final missing headers for basic C++ libraries, like &lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt;.&lt;br&gt;
But I'd followed the brew instructions to set my lib/include paths properly...  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To use the bundled libc++ please add the following LDFLAGS:&lt;br&gt;
  LDFLAGS="-L/usr/local/opt/llvm@15/lib/c++ -Wl,-rpath,/usr/local/opt/llvm@15/lib/c++"&lt;br&gt;
  For compilers to find llvm@15 you may need to set:&lt;br&gt;
  export CPPFLAGS="-I/usr/local/opt/llvm@15/include"  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, they're actually &lt;strong&gt;incorrect&lt;/strong&gt;! Your include should be &lt;code&gt;"-I/usr/local/opt/llvm@15/include/c++/v1"&lt;/code&gt; instead. Thanks for nothing. &lt;/p&gt;
&lt;p&gt;So with just a compiler swap and those three lines in your &lt;a href="https://github.com/Difegue/Chaotic-Realm/blob/master/snapcast-highsierra/snapcast.rb"&gt;snapcast formula&lt;/a&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
    &lt;span class="cp"&gt;# Use brew llvm&lt;/span&gt;
    &lt;span class="n"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CXXFLAGS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-I/usr/local/opt/llvm@15/include/c++/v1&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LDFLAGS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-L/usr/local/opt/llvm@15/lib/c++ -Wl,-rpath,/usr/local/opt/llvm@15/lib/c++&amp;quot;&lt;/span&gt;

    &lt;span class="cp"&gt;# Hijack compiler path directly in cmake call &lt;/span&gt;
    &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cmake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;std_cmake_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-DHAVE_CXX_ATOMICS_WITHOUT_LIB=TRUE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-DCMAKE_C_COMPILER=/usr/local/opt/llvm@15/bin/clang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-DCMAKE_CXX_COMPILER=/usr/local/opt/llvm@15/bin/clang++&amp;quot;&lt;/span&gt;
    &lt;span class="cp"&gt;# Rest of the formula proceeds as usual&lt;/span&gt;
    &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cmake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should be able to build snapcast on High Sierra.&lt;br&gt;
&lt;img alt="" src="images/over.jpg"&gt;&lt;br&gt;
Nothing like some brew bullshit to start off the year.  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;sup id="note-1"&gt;&lt;a href="#ref-1"&gt;*&lt;/a&gt; I'm of course using &lt;a href="https://github.com/Difegue/Stylophone"&gt;Stylophone&lt;/a&gt; by yours truly, but also &lt;a href="https://persephone.fm/"&gt;Persephone&lt;/a&gt; for macOS, &lt;a href="https://gitlab.com/gateship-one/malp"&gt;MALP&lt;/a&gt; for Android, and even a bit of &lt;a href="https://github.com/ncmpcpp/ncmpcpp"&gt;ncmpcpp&lt;/a&gt;!&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-2"&gt;&lt;a href="#ref-2"&gt;**&lt;/a&gt; I can already hear the wails of &lt;em&gt;"whyyy aren't you putting linux on it it's just x86"&lt;/em&gt;: I actually use the machine occasionally for 32bit mac software! Also, the &lt;a href="https://github.com/pedrommcarrasco/Brooklyn"&gt;Brooklyn screensaver&lt;/a&gt; is really neat and I like having it in my living room.&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-3"&gt;&lt;a href="#ref-3"&gt;***&lt;/a&gt; I initially tried compiling snapcast 0.26, but that &lt;a href="https://github.com/badaix/snapcast/issues/1082"&gt;doesn't work&lt;/a&gt; with the boost lib provided by brew, so make sure to use 0.27. &lt;/sup&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="macos"></category><category term="snapcast"></category><category term="home automation"></category><category term="homebrew"></category><category term="reuse"></category></entry><entry><title>A most fast-fooded Christmas</title><link href="https://tvc-16.science/mcorigins-xmas.html" rel="alternate"></link><published>2023-12-08T00:01:00+01:00</published><updated>2023-12-08T00:01:00+01:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2023-12-08:/mcorigins-xmas.html</id><summary type="html">&lt;p&gt;Happy Holidays from me, the McDonald's Corporation, Yuji Naka and Tony Hawk.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're back with more McDonald's games at Christmas SAGE!&lt;br&gt;
It might not be the ones you wanted though...&lt;br&gt;
&lt;img alt="Tony Hawk's Sonic McOrigins Plus Christmas" src="./images/lcdonald/mcorigins_xmas_hero.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="./mcorigins-plus.html"&gt;As promised&lt;/a&gt;, I used up all my &lt;em&gt;"I got one more in me"&lt;/em&gt; energy to give McOrigins the true shitpost sendoff it deserved.  &lt;/p&gt;
&lt;h3&gt;Tony Hawk's Sonic McOrigins Plus Christmas is now &lt;a href="https://sonicfangameshq.com/forums/showcase/tony-hawks-sonic-mcorigins-plus-christmas.1953/"&gt;available for download&lt;/a&gt; at Christmas SAGE! Merry Skatemas!&lt;/h3&gt;
&lt;p&gt;&lt;sup&gt;i'll update the itch.io builds later i swear...&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Changes include:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;ESPN Reskins&lt;/strong&gt; of the 2004 games, featuring everyone's favorite Sonic characters: &lt;em&gt;Tony Hawk, Vince Carter&lt;/em&gt;, and more!  &lt;ul&gt;
&lt;li&gt;The reskins are located as additional versions of the Sonic games they're based on.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Selecting a game will now randomly pick one of the variants when they're available  &lt;/li&gt;
&lt;li&gt;Small QoL improvements to the UI  &lt;/li&gt;
&lt;li&gt;A few more new manual scans  &lt;/li&gt;
&lt;li&gt;32bit Android support in case you are stuck in 2010 &lt;sub&gt;my condolences&lt;/sub&gt;  &lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;Endless Mode&lt;/strong&gt; -- How long can you withstand the difficulty (or absolute boredom) of &lt;strong&gt;&lt;em&gt;maximum speed McDonalds gameplay?&lt;/em&gt;&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please enjoy the trailer below as well.&lt;br&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Um-btPpXhfU?si=6Er9rzi9Z4OULhO1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;This is not a very large update, but I keep forgetting how time-consuming scanning those LCD games are...&lt;br&gt;
I had a lot of fun making the advertising assets though!&lt;br&gt;
&lt;img alt="Dissecting an ESPN game" src="./images/lcdonald/voltagefun.jpg"&gt;&lt;br&gt;
I have a few ideas for one last "ultimate" update, but I don't think I'll get to it before 2025.  &lt;/p&gt;
&lt;p&gt;Also entirely related but by looking at the #mcdonalds hashtag on social media when writing my promo posts, I found out they're making a &lt;a href="https://www.bbc.co.uk/news/business-67644926"&gt;spinoff coffee chain&lt;/a&gt; with 80's branding?&lt;br&gt;
I never thought I'd see the day where McD's corporate design would stop being soulless...&lt;br&gt;
&lt;img alt="The name for the new brand comes from a McDonaldland mascot, an alien from outer space that craves its food, which appeared in adverts in the late 1980s and early 1990s." src="./images/lcdonald/cosmc.jpg"&gt;&lt;br&gt;
That, or 80s revival is so trendy now it has &lt;em&gt;become&lt;/em&gt; the soulless thing... But &lt;strong&gt;look at those sparkles god damn&lt;/strong&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="sonic"></category><category term="mcdonalds"></category><category term="c#"></category><category term="avalonia"></category><category term=".net"></category><category term="lcd"></category><category term="game&amp;watch"></category><category term="video games"></category><category term="simulator"></category><category term="sage"></category><category term="christmas"></category></entry><entry><title>The Stylophone 2.6 Update is here!</title><link href="https://tvc-16.science/stylophone-26.html" rel="alternate"></link><published>2023-09-20T00:00:00+02:00</published><updated>2023-09-20T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2023-09-20:/stylophone-26.html</id><summary type="html">&lt;p&gt;Thank you, Ryuichi Sakamoto.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been... &lt;a href="./stylophone-25.html"&gt;a year&lt;/a&gt; once again! Wow! &lt;br&gt;
Now that the &lt;a href="./funtography"&gt;gamedev&lt;/a&gt; side of the hustle has quieted down a bit, it's time to get back into the app business.  &lt;/p&gt;
&lt;p&gt;In this hectic period of iOS17 app updates, I'm happy to deliver... the &lt;strong&gt;&lt;em&gt;iOS16&lt;/em&gt; update&lt;/strong&gt; for Stylophone&lt;sup id="ref-1"&gt;&lt;a href="#note-1"&gt;*&lt;/a&gt;&lt;/sup&gt;. 🤲&lt;br&gt;
&lt;code&gt;v2.6&lt;/code&gt; is a fairly large update, fixing some longstanding bugs for both iOS and Windows/Xbox.  &lt;/p&gt;
&lt;p&gt;The iOS version has freed itself from the shackles of &lt;em&gt;old&lt;/em&gt; Xamarin and is now... on &lt;a href="https://github.com/xamarin/xamarin-macios/wiki/.NET-release-notes-Xcode-13.3"&gt;&lt;em&gt;new&lt;/em&gt; Xamarin&lt;/a&gt;, AKA .NET 7.  &lt;/p&gt;
&lt;p&gt;The Windows version hasn't budged at all since I still want to support Xboxes&lt;sup id="ref-2"&gt;&lt;a href="#note-2"&gt;**&lt;/a&gt;&lt;/sup&gt;.&lt;br&gt;
It still got some nice new UI improvements thanks to the recent &lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-windows-community-toolkit-v8-0/"&gt;Windows Community Toolkit&lt;/a&gt; update, however!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Stylophone 2.6 on iPhone" src="https://tvc-16.science/images/stylophone/v26-iphone.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;iOS/iPadOS&lt;/em&gt; received the blunt of the UI work this time - iPhone users should enjoy much more usable table views now, with edit mode enabled for &lt;strong&gt;quick reorder/deletion&lt;/strong&gt;.&lt;br&gt;
I added a bunch of missing Narrator/VoiceOver hints following reports by a visually impaired user to both versions. Kinda wish I'd gone over that earlier considering how easy it was..&lt;/p&gt;
&lt;p&gt;There's some new MPD feature support as well, most notably the new &lt;code&gt;playlistdelete&lt;/code&gt; range functionality!&lt;br&gt;
I have made a matching &lt;a href="https://www.nuget.org/packages/MpcNET/"&gt;MpcNET&lt;/a&gt; nuget release, in case you want to use that.  &lt;/p&gt;
&lt;h3&gt;As usual, the apps can be downloaded from both the &lt;a href="https://www.microsoft.com/store/apps/9NCB693428T8?cid=storebadge&amp;amp;ocid=badge"&gt;Microsoft Store&lt;/a&gt; and the &lt;a href="https://apps.apple.com/us/app/stylophone/id1644672889?itsct=apps_box_link&amp;amp;itscg=30200"&gt;App Store.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hope you enjoy the updates! Free for existing users as always. Here's the full changelog:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="n"&gt;potential&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;GetColor&lt;/span&gt; &lt;span class="n"&gt;crashing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;MPD&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;albumsort&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;listing&lt;/span&gt; &lt;span class="n"&gt;albums&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Library&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;albumartist&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt;
    &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MPD&lt;/span&gt; &lt;span class="n"&gt;playlistdelete&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;removing&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;playlists&lt;/span&gt;

&lt;span class="n"&gt;UWP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;Migrate&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Windows&lt;/span&gt; &lt;span class="n"&gt;Community&lt;/span&gt; &lt;span class="n"&gt;Toolkit&lt;/span&gt; &lt;span class="n"&gt;v8&lt;/span&gt; &lt;span class="err"&gt;🎊&lt;/span&gt;
    &lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;broken&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Windows&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;machines&lt;/span&gt;
    &lt;span class="n"&gt;Shadows&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;revamped&lt;/span&gt; &lt;span class="n"&gt;across&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;nicer&lt;/span&gt; &lt;span class="n"&gt;segmented&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt; &lt;span class="n"&gt;facelift&lt;/span&gt;
    &lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;showing&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt; &lt;span class="n"&gt;art&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;downloading&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;playback&lt;/span&gt; &lt;span class="n"&gt;slider&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;properly&lt;/span&gt; &lt;span class="n"&gt;controllable&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="k"&gt;no&lt;/span&gt; &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;suspended&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;fixes&lt;/span&gt; &lt;span class="n"&gt;various&lt;/span&gt; &lt;span class="n"&gt;issues&lt;/span&gt; &lt;span class="n"&gt;regarding&lt;/span&gt; &lt;span class="k"&gt;connection&lt;/span&gt; &lt;span class="n"&gt;stability&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Xbox&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="n"&gt;functionality&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Try&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="n"&gt;potential&lt;/span&gt; &lt;span class="k"&gt;exception&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;play&lt;/span&gt;
    &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;Narrator&lt;/span&gt; &lt;span class="n"&gt;hints&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;playback&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;iOS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;migrated&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NET7&lt;/span&gt; &lt;span class="err"&gt;🎊&lt;/span&gt; &lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;iOS16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;reworked&lt;/span&gt; &lt;span class="n"&gt;across&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;show&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;compact&lt;/span&gt; &lt;span class="k"&gt;mode&lt;/span&gt;
    &lt;span class="n"&gt;Fixed&lt;/span&gt; &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="n"&gt;getting&lt;/span&gt; &lt;span class="n"&gt;resized&lt;/span&gt; &lt;span class="n"&gt;incorrectly&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;phones&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;switching&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;portrait&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;landscape&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;directly&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;old&lt;/span&gt; &lt;span class="n"&gt;multiselect&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;playlist&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;retired&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;time&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Queue&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Playlists&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;edited&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reordered&lt;/span&gt;
    &lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;visiting&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;clicking&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Add to Queue&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Fixed&lt;/span&gt; &lt;span class="n"&gt;navigation&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;phones&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;taking&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt; &lt;span class="k"&gt;before&lt;/span&gt; &lt;span class="n"&gt;showing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Sidebar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Rework&lt;/span&gt; &lt;span class="n"&gt;NowPlaying&lt;/span&gt; &lt;span class="k"&gt;View&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="n"&gt;safe&lt;/span&gt; &lt;span class="n"&gt;insets&lt;/span&gt; &lt;span class="n"&gt;properly&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Playlist&lt;/span&gt; &lt;span class="n"&gt;dialog&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;retooled&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="k"&gt;less&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="k"&gt;space&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;notifications&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="k"&gt;less&lt;/span&gt; &lt;span class="n"&gt;intrusive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;VoiceOver&lt;/span&gt; &lt;span class="n"&gt;hints&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;playback&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;&lt;img alt="good ol' vsmac.." src="https://tvc-16.science/images/stylophone/vsmac.png"&gt;&lt;br&gt;
Working on the iOS version of Stylophone means I get to pull out &lt;strong&gt;Visual Studio for Mac&lt;/strong&gt;... Which is &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/"&gt;dying soon.&lt;/a&gt;&lt;br&gt;
I'm gonna miss the thing!  &lt;/p&gt;
&lt;p&gt;Sure, it's the red-headed stepchild of regular Visual Studio, built off the back of &lt;a href="https://github.com/mono/monodevelop/"&gt;MonoDevelop&lt;/a&gt; without contributing sources back... But I got into macOS/iOS development with it and for all its weird faults and bugs, it was &lt;em&gt;fine&lt;/em&gt; and had a decent workflow for Xamarin-based projects.  &lt;/p&gt;
&lt;p&gt;It feels especially wasteful considering they &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-is-now-available/"&gt;revamped large swaths&lt;/a&gt; of it &lt;strong&gt;last year&lt;/strong&gt;!&lt;br&gt;
🤨 What the fuck is Microsoft even &lt;em&gt;doing&lt;/em&gt;? Did they just fire most of the devs in their godawful layoffs and couldn't keep it going?  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Please do not dunk on my music tastes too hard" src="https://tvc-16.science/images/stylophone/v25-catalyst.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;On the flipside, having moved to NET7 gives me access to Mac Catalyst builds of Stylophone again...&lt;br&gt;
There are &lt;a href="https://github.com/danbee/persephone"&gt;great native&lt;/a&gt; MPD clients for macOS already, but I might release that as a freebie version later.  &lt;/p&gt;
&lt;p&gt;Maybe even with iOS17 goodies thrown in!  &lt;/p&gt;
&lt;p&gt;...If the xamarin platform doesn't keel over and die in the meantime&lt;sup id="ref-3"&gt;&lt;a href="#note-3"&gt;***&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;sup id="note-1"&gt;&lt;a href="#ref-1"&gt;*&lt;/a&gt; I really wanted to use &lt;a href="https://bendodson.com/weblog/2023/07/26/tipkit-tutorial/"&gt;TipKit&lt;/a&gt;, but the xamarin bindings probably won't be ready for another few months... Them be the woes of cross-platform development.&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-2"&gt;&lt;a href="#ref-2"&gt;**&lt;/a&gt; which hopefully will be more usable now that I'm using the ol' silent .wav technique to prevent the app from being background killed 😎😎&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-3"&gt;&lt;a href="#ref-3"&gt;***&lt;/a&gt; Also my mac mini doesn't support Ventura and I already had to hack the minversion to get Xcode 14.3 to run sooo &lt;/sup&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="mpd"></category><category term="xamarin"></category><category term="dotnet"></category><category term="c#"></category><category term="uwp"></category><category term="windows"></category><category term="xbox"></category><category term="ios"></category><category term="app store"></category><category term="music"></category><category term="client"></category><category term="stylophone"></category></entry><entry><title>Sonic McOrigins Plus at SAGE 2023!</title><link href="https://tvc-16.science/mcorigins-plus.html" rel="alternate"></link><published>2023-09-01T00:01:00+02:00</published><updated>2023-09-01T00:01:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2023-09-01:/mcorigins-plus.html</id><summary type="html">&lt;p&gt;to be this good takes a double big mac and some mcnuggets on the side&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Sonic McOrigins timeline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="./lcdonald.html"&gt;Original announcement&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="./mcorigins.html"&gt;2022 SAGE release&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;2023 "Plus" SAGE release (You are here)  &lt;/li&gt;
&lt;li&gt;&lt;a href="./mcorigins-xmas.html"&gt;Tony Hawk's McOrigins Plus Christmas&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a href="./mcorigins-xmas.html"&gt;here&lt;/a&gt; for the latest McOrigins-related post (and download links 🍟)  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Is 2023 the year of the LCD game revival? If &lt;a href="https://dukope.com/devlogs/papers-please/lcdplease/"&gt;Lucas Pope&lt;/a&gt; is any indication, it might just be.&lt;br&gt;
Last year's &lt;a href="./mcorigins.html"&gt;Sonic McOrigins&lt;/a&gt; release was quite loved and people keep &lt;a href="https://www.youtube.com/watch?v=v6Ox9-IVB6I"&gt;covering it&lt;/a&gt;, but it was incomplete in a few ways.  &lt;/p&gt;
&lt;p&gt;Most notably, it was missing a few games and manuals...&lt;br&gt;
The internet's hunger&lt;sup id="ref-1"&gt;&lt;a href="#note-1"&gt;*&lt;/a&gt;&lt;/sup&gt; for &lt;em&gt;Shadow Basketball&lt;/em&gt; could not be contained any longer.&lt;br&gt;
&lt;img alt="Hero image for &amp;quot;Sonic McOrigins Plus&amp;quot;, the v2 release of my LCD game simulator. The photo shows a Sonic-themed Happy Meal Box lying on its side with a lot of LCD games pouring out from it, including an Android phone running the simulator. The tagline at the bottom is styled like 2000s Happy Meal adverts and says &amp;quot;to be this good takes ages&amp;quot;, alongside some era-appropriate OS logos for Win/Mac/Linux/Android. The sticker on the top left of the photo is the Sonic Boom &amp;quot;Inspired by the video games!&amp;quot; meme, which I totally didn't put there to hide my dodgy photoshop skills hahaha...." src="images/lcdonald/mcorigins_plus_hero.jpg"&gt;  &lt;/p&gt;
&lt;h3&gt;Sonic McOrigins Plus&lt;sup id="ref-2"&gt;&lt;a href="#note-2"&gt;**&lt;/a&gt;&lt;/sup&gt; is now &lt;a href="https://sonicfangameshq.com/forums/showcase/sonic-mcorigins-plus.1602/"&gt;available for download&lt;/a&gt; at SAGE 2023!&lt;/h3&gt;
&lt;p&gt;And itch.io this time around as well.&lt;br&gt;
&lt;iframe frameborder="0" src="https://itch.io/embed/2243408?link_color=ed8a35" width="552" height="167"&gt;&lt;a href="https://difegue.itch.io/sonic-mcorigins-plus"&gt;Sonic McOrigins Plus by dfug&lt;/a&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Changes since the original release include:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mouse/touch support for handling the games&lt;/li&gt;
&lt;li&gt;Added missing games for a total of &lt;strong&gt;20&lt;/strong&gt;: Shadow Hockey, Amy/Rouge Volleyball and Shadow Basketball&lt;/li&gt;
&lt;li&gt;Layout improvements with some more OG McDonald's assets&lt;sup id="ref-3"&gt;&lt;a href="#note-3"&gt;***&lt;/a&gt;&lt;/sup&gt; &lt;/li&gt;
&lt;li&gt;Updated manual scans for Knuckles' Treasure Hunt and AiAi Banana Catch&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Android&lt;/strong&gt; port&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please enjoy the trailer below as well.  &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/HDJdoqBUhGM?si=qb-_0qy7dgpcD3dF" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;What's next?&lt;/h1&gt;
&lt;p&gt;On the short term? &lt;/p&gt;
&lt;h3&gt;&lt;em&gt;Nothing&lt;/em&gt;! I'm gonna go play some vidya james at &lt;a href="https://sagexpo.org/"&gt;SAGE&lt;/a&gt; and so should you.&lt;/h3&gt;
&lt;p&gt;If you'd be interested in something not-Sonic related from me, maybe you'd fancy looking at &lt;a href="./funtography.html"&gt;Funtography&lt;/a&gt;, my &lt;em&gt;GB Cameradventure game&lt;/em&gt;? It's also at SAGE!  &lt;/p&gt;
&lt;p&gt;Regarding the McOrigins project itself...  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I'm &lt;strong&gt;not&lt;/strong&gt; doing any other Sonic LCD games - Leave that to the &lt;a href="https://archive.org/details/hh_tsonic"&gt;pros!&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An iOS port is &lt;strong&gt;unlikely&lt;/strong&gt; since Avalonia doesn't support iOS  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm &lt;strong&gt;not&lt;/strong&gt; doing any other McDonald's LCD games since only Sonic could've motivated me to put 2 years of work into this  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://github.com/Difegue/LCDonald"&gt;code&lt;/a&gt; is all there and free for the taking though, so if you want to simulate the Crash or Spyro games for example, it'd be possible to reuse all of it with your own photos/scans/logic.  &lt;/li&gt;
&lt;li&gt;I've documented the process &lt;a href="./lcdonald.html"&gt;rather&lt;/a&gt; &lt;a href="./mcorigins.html"&gt;extensively&lt;/a&gt; at this point and wouldn't mind answering any questions. ✌️&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One area I &lt;em&gt;might&lt;/em&gt; explore would be the &lt;a href="https://www.ebay.com/itm/313956178072"&gt;ESPN reskins&lt;/a&gt; of the 2004 series. &lt;sub&gt;It's funnier to me than it has any right to be tbh&lt;/sub&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There should be no logic to rewrite, it's just some more photo/scan work.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And of course, work finding the missing &lt;a href="https://github.com/Difegue/LCDonald/issues"&gt;instruction manual scans&lt;/a&gt; continues.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the hubbub around Apple's &lt;a href="https://developer.apple.com/visionos/"&gt;visionOS&lt;/a&gt; kinda makes me want to look at making a VR/3D version?&lt;br&gt;
I've talked about &lt;a href="https://www.emuvr.net/"&gt;emuVR&lt;/a&gt; before as an example, it'd be funny to have the games available as VRChat props or some stuff like that.  &lt;/p&gt;
&lt;p&gt;...But I don't have any form of VR rig atm so it's probably not happening. 🤷  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;sup id="note-1"&gt;&lt;a href="#ref-1"&gt;*&lt;/a&gt; "One thesis of the &lt;a href="https://maxread.substack.com/p/the-internet-is-for-12-year-olds?utm_source=TVC-16"&gt;Read Max newsletter&lt;/a&gt; is that a huge portion-- much more than you might imagine--of content produced on the internet [...] is consumed by 12-year-olds."&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-2"&gt;&lt;a href="#ref-2"&gt;**&lt;/a&gt; I was originally considering &lt;em&gt;Sonic McOrigins Ultimate&lt;/em&gt;, &lt;em&gt;Sonic McOrigins DX&lt;/em&gt;, or &lt;em&gt;Sonic McOrigins &amp;amp; Knuckles&lt;/em&gt;, but Sega went ahead and gave the disappointing DLC treatment to Origins so I didn't really have a choice&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-3"&gt;&lt;a href="#ref-3"&gt;***&lt;/a&gt; I considered using the &lt;a href="https://www.itsnicethat.com/articles/turner-duckworth-redesign-mcdonalds-branding-visual-identity-graphic-design-250719"&gt;Speedee typeface&lt;/a&gt; for the UI but ultimately decided against it -- It's not like that font was in use back when the games released anyway.&lt;/sup&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="sonic"></category><category term="mcdonalds"></category><category term="c#"></category><category term="avalonia"></category><category term=".net"></category><category term="lcd"></category><category term="game&amp;watch"></category><category term="video games"></category><category term="simulator"></category><category term="sage"></category></entry><entry><title>Introducing DialogueForest</title><link href="https://tvc-16.science/dialogueforest.html" rel="alternate"></link><published>2023-04-12T00:00:00+02:00</published><updated>2023-04-12T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2023-04-12:/dialogueforest.html</id><summary type="html">&lt;p&gt;An opinionated Dialogue Writing tool for Games.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a new &lt;em&gt;certified dfugdrop&lt;/em&gt;™️! Let's not talk about how I left it dead for &lt;a href="https://twitter.com/Difegue/status/1488666105115824132"&gt;more than a year.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="A screenshot of DialogueForest in light mode." src="images/dialogueforest/screenshot.png"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DialogueForest&lt;/strong&gt; is a (free!) Windows App built on WinUI 3 that allows you to write hierarchical rich text dialogue with custom characters and metadata, sprinkled with some basic productivity features like daily objectives/notifications. &lt;/p&gt;
&lt;p&gt;The reasoning behind this app is that I couldn't find a good tool to write medium-length branching dialogue for my burgeoning&lt;sup id="ref-1"&gt;&lt;a href="#note-1"&gt;*&lt;/a&gt;&lt;/sup&gt; gamedev efforts.&lt;br&gt;
Most tools are based on node graphs, which very quickly become unmanageable&lt;sup id="ref-2"&gt;&lt;a href="#note-2"&gt;**&lt;/a&gt;&lt;/sup&gt; if you're trying to write a lot of text.  &lt;/p&gt;
&lt;h3&gt;Check it out on &lt;a href="https://difegue.itch.io/dialogueforest"&gt;itch.io!&lt;/a&gt;&lt;/h3&gt;
&lt;iframe frameborder="0" src="https://itch.io/embed/2010301" width="552" height="167"&gt;&lt;a href="https://difegue.itch.io/dialogueforest"&gt;DialogueForest by dfug&lt;/a&gt;&lt;/iframe&gt;

&lt;p&gt;You can also browse the source code &lt;a href="https://github.com/Difegue/DialogueForest"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I found out that tools like these are called Outliners - I recommend the following &lt;a href="https://rpg.stackexchange.com/questions/34816/tree-based-tool-to-create-dialog"&gt;SE question&lt;/a&gt; if you're looking for other tools like this one. I notably looked at &lt;a href="https://www.literatureandlatte.com/scrivener/overview"&gt;Scrivener&lt;/a&gt; for inspiration, but there's no way I was going to remake all of that...  &lt;/p&gt;
&lt;p&gt;You can read some more of my design/dev thoughts below, as always.  &lt;/p&gt;
&lt;h1&gt;The Icon and UX&lt;/h1&gt;
&lt;p&gt;I'm quite fond of the whole Dialogue Tree/Forest analogies, and wanted an icon that'd follow that kind of whimsy.  &lt;br&gt;
This one is very obviously inspired by the classic Mac &lt;a href="https://www.cnet.com/pictures/susan-kares-early-mac-icons-gave-computers-a-personality-photos/2/"&gt;Alert Icon&lt;/a&gt; with a dash of Whispy Woods -- I didn't think I had good enough 3D/Spline skills to make a "mascot" icon like all the cool guys do, but it turned out alright!&lt;br&gt;
&lt;img alt="wahoo" src="images/dialogueforest/icon_base.png"&gt;&lt;br&gt;
Compare it to this jank mockup I scribbled on last year's Hobonichi Techo:&lt;br&gt;
&lt;img alt="you can even see early UI designs behind it if you squint" src="images/dialogueforest/draft_icon.png"&gt;  &lt;/p&gt;
&lt;p&gt;Having a humanized icon makes the app fun, and the speech bubble makes it easy to re-use in a bunch of different scenarios as well:&lt;br&gt;
&lt;img alt="" src="images/dialogueforest/icons.png"&gt;&lt;br&gt;
&lt;sub&gt;&lt;sup&gt;The evening/night variants were planned for the welcome page to go alongside the time-based greeting, but I ultimately cut them 🤷&lt;/sub&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;The app is laid out in a very personal way this time since I mostly built it for my own use.   &lt;/p&gt;
&lt;p&gt;I did aim for a three-column layout voluntarily though -- Those layouts have gotten quite popular on macOS, but I've rarely seen them on Windows so far? Even though I think they totally work in WinUI.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="damn that's packed son" src="images/dialogueforest/packed_ui.png"&gt;&lt;br&gt;
It's been a fun experiment to try and design a featureful/"crammed" WinUI app - You really can get a lot going in modern Windows apps now, even without the Compact controls.&lt;/p&gt;
&lt;h1&gt;Technical Thoughts&lt;/h1&gt;
&lt;p&gt;DialogueForest started life as an UWP app just like &lt;a href="./stylophone.html"&gt;Stylophone&lt;/a&gt;, but I moved it to &lt;a href="https://github.com/microsoft/WindowsAppSDK"&gt;Windows App SDK&lt;/a&gt; this year to try the platform out and see if it was usable to ship something.  &lt;/p&gt;
&lt;p&gt;Since you're reading this, I guess it was! It's still a bit rough&lt;sup id="ref-3"&gt;&lt;a href="#note-3"&gt;***&lt;/a&gt;&lt;/sup&gt; around the edges though...&lt;br&gt;
The experience kinda sucks for end-users when you look at the WinAppSDK runtime installer:&lt;br&gt;
&lt;img alt="A beautiful console window installing weird MSIX packages so you can use winappsdk" src="images/dialogueforest/wasdk.png"&gt;&lt;br&gt;
Now of course I couldve bothered to make a nice MSI/MSIX that'd install the runtimes on its own, but you're not gonna expect me to do this for a free app -- what's next, code signing?  &lt;/p&gt;
&lt;p&gt;I might eventually upload a packaged version to the MS Store anyway, maybe as a &lt;code&gt;"plus"&lt;/code&gt;&lt;sup id="ref-4"&gt;&lt;a href="#note-4"&gt;#&lt;/a&gt;&lt;/sup&gt; paid kind of deal with some junk like GPT integration that writes the dialogue for you? &lt;em&gt;everyone loves them LLMs i am a business genius&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Rich Text support was both very easy thanks to included controls and a massive pain because nobody really works with RTF anymore. 🫠&lt;br&gt;
I did do the whole netstandard Core/Viewmodel thing &lt;a href="./stylophone-25.html"&gt;again&lt;/a&gt;, so a macOS version is certainly possible later down the line. I doubt I'll make one for something this niche though..  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;&lt;sup id="note-1"&gt;&lt;a href="#ref-1"&gt;*&lt;/a&gt; kindest word I can find for "not moving forward at all"&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-2"&gt;&lt;a href="#ref-2"&gt;**&lt;/a&gt; my best/previous functioning setup was an excel sheet with macros, so you can guess how messy that was&lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-3"&gt;&lt;a href="#ref-3"&gt;***&lt;/a&gt; I'm very thankful for &lt;a href="https://github.com/dotMorten/WinUIEx"&gt;WinUIEx&lt;/a&gt;! &lt;/sup&gt;&lt;br&gt;
&lt;sup id="note-4"&gt;&lt;a href="#ref-4"&gt;#&lt;/a&gt; would be about as worth it as sonic origins plus, thanks for the game gear games again sega &lt;/sup&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="dotnet"></category><category term="c#"></category><category term="gamedev"></category><category term="winui"></category><category term="windows"></category><category term="windows 11"></category><category term="winappsdk"></category><category term="outliner"></category><category term="dialogueforest"></category></entry><entry><title>I made a Pebble watchface</title><link href="https://tvc-16.science/pebble-copland.html" rel="alternate"></link><published>2022-11-21T00:00:00+01:00</published><updated>2022-11-21T00:00:00+01:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2022-11-21:/pebble-copland.html</id><summary type="html">&lt;p&gt;In 2008, PC World included Copland on a list of the biggest project failures in information technology history.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="https://rebble.io/hackathon-001/"&gt;Rebble Hackathon #001&lt;/a&gt; happened this weekend, so it was a nice opportunity to finally dig into the &lt;a href="https://developer.rebble.io/developer.pebble.com/index.html"&gt;Pebble SDK&lt;/a&gt; and try and make something for my favorite dead smartwatch.  &lt;/p&gt;
&lt;p&gt;I always wanted to make a watchface of some form, but design ideas are pretty tough to come by! I ended up going for a recreation of &lt;a href="https://www.hodinkee.com/articles/the-apple-watch-from-1995"&gt;this&lt;/a&gt; 90's design for a promotional MacOS watch I find cool.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Copland Watchface for Pebble" src="images/copland-watchface.png"&gt;  &lt;/p&gt;
&lt;p&gt;It's called "Copland", after the 1995 &lt;a href="https://en.wikipedia.org/wiki/Copland_(operating_system)"&gt;failed Apple OS&lt;/a&gt;. (Thought it was funny to call a face for a dead watch after a dead OS, sue me) &lt;/p&gt;
&lt;h3&gt;You can grab it on the Rebble Appstore &lt;a href="https://apps.rebble.io/en_US/application/637abd01fdf3e30009f6399c"&gt;here&lt;/a&gt;!&lt;/h3&gt;
&lt;p&gt;There aren't many watchfaces with a seconds hand since that drains battery quite a bit faster; I added it because it's &lt;strong&gt;cool&lt;/strong&gt;, but being able to disable it will certainly come in a future update. 😅  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Copland on Pebble Time and Time Round" src="images/copland-chalk.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I also wanted to add a &lt;a href="https://developer.rebble.io/developer.pebble.com/guides/graphics-and-animations/vector-graphics/index.html"&gt;PDC vector image&lt;/a&gt; to the top of the watchface and went with the C SDK as a result (The JS one didn't get to support them before Pebble died), so that'd also be a nice thing to add.  &lt;/p&gt;
&lt;p&gt;And apart from that ehh, maybe being able to set custom colors for the hands and a custom font for that date at the bottom? We'll see about that next time.  &lt;/p&gt;</content><category term="Software"></category><category term="pebble"></category><category term="rebble"></category><category term="watchface"></category><category term="apple"></category><category term="hackathon"></category></entry><entry><title>DoujinSoft is 5 years old -- v3.5 is now live!</title><link href="https://tvc-16.science/doujinsoft-3.html" rel="alternate"></link><published>2022-10-06T00:00:00+02:00</published><updated>2022-10-06T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2022-10-06:/doujinsoft-3.html</id><summary type="html">&lt;p&gt;Freeing DIY from the shackles of Nintendo hardware...almost.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://diy.tvc-16.science/"&gt;The DoujinSoft Store&lt;/a&gt; is 5 already! It still stands as the last thing I &lt;a href="/doujinsoft-2.html"&gt;wrote in Java&lt;/a&gt; and I wasn't expecting it to hold that long ¯\_(ツ)_/¯  &lt;/p&gt;
&lt;p&gt;It still receives new content fairly often - Thanks to everyone who contributes!&lt;br&gt;
To celebrate the occasion &lt;sup&gt;(not really it's just lining up nicely)&lt;/sup&gt;, the store has been given a fresh coat of paint... alongside some new mysterious buttons?  &lt;/p&gt;
&lt;p&gt;&lt;img alt="what could this play button possibly do?" src="/images/doujinsoft/playbtn.jpg"&gt;  &lt;/p&gt;
&lt;h1&gt;The mystery button&lt;/h1&gt;
&lt;p&gt;DoujinSoft has been able to &lt;em&gt;play music&lt;/em&gt; and &lt;em&gt;read comics&lt;/em&gt; in the browser since it was released, but the biggest part of WarioWare DIY's user-generated content has always been absent from the browser...until now.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="not gonna lie I was pretty good at tracing pixel art back then" src="/images/doujinsoft/gamepreview.jpg"&gt;&lt;br&gt;
If you told me 12 years ago I'd still be looking at my microgames but on a 4K display through the Internet, I probably wouldn't have believed you.  &lt;/p&gt;
&lt;h2&gt;Available &lt;strong&gt;now&lt;/strong&gt;, the DoujinSoft store now allows you to play &lt;em&gt;every single WarioWare DIY game in your browser.&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;This is something I was secretly hoping for ever since launching the service, but I wasn't really expecting anyone to actually go and reverse-engineer DIY AI to make it happen.&lt;br&gt;
95% of the work that went into this update comes from &lt;strong&gt;&lt;a href="https://yeahross.itch.io/"&gt;yeahross'&lt;/a&gt;&lt;/strong&gt; exceptional Mio-Micro project, which has been cooking for a few months already. You should certainly go throw some flowers his way!  &lt;/p&gt;
&lt;h1&gt;Player integration&lt;/h1&gt;
&lt;p&gt;I'd have felt kinda bad just pushing out this update and writing a blogpost about it without contributing &lt;em&gt;something&lt;/em&gt;, so by leveraging the mio-micro player, there's a fun little bonus in DoujinSoft's &lt;strong&gt;collections&lt;/strong&gt; pages now:  &lt;/p&gt;
&lt;video controls repeat autoplay muted src="images/doujinsoft/player_demo.mp4"&gt;&lt;/video&gt;

&lt;p&gt;Huh, it's &lt;em&gt;almost&lt;/em&gt; like a real WarioWare game now!&lt;br&gt;
The animations are taken straight from &lt;a href="https://animate.style/"&gt;Animate.css&lt;/a&gt; which isn't really designed for that sort of thing, but it's unreal how well it works.&lt;br&gt;
The sounds are a bit of a &lt;a href="https://www.youtube.com/watch?v=40GhbBZGYZY"&gt;deep cut&lt;/a&gt;, but if like me you've been listening to the DIY jingles for years, a bit of change is nice. 😩  &lt;/p&gt;
&lt;p&gt;Some caveats in this first version:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no speed-up mechanic, but considering how obtuse some of the games are to win, I wonder if you'll really need it 🙃 &lt;/li&gt;
&lt;li&gt;Boss games &lt;strong&gt;are&lt;/strong&gt; included and will give you 1-UPs, but they'll come in just as randomly as normal games do.&lt;/li&gt;
&lt;li&gt;While mio-micro is &lt;strong&gt;very&lt;/strong&gt; good at simulating DIY games, there might still be some emulation errors that make some games unwinnable. Please let us know on the &lt;a href="https://github.com/yeahross0/Mio-Micro"&gt;mio-micro Github page!&lt;/a&gt;    &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Some other stuff&lt;/h1&gt;
&lt;p&gt;In yet &lt;a href="/mcorigins.html"&gt;another&lt;/a&gt; Spline &lt;a href="/stylophone-25.html"&gt;frenzy&lt;/a&gt;, the store now has some new backgrounds and promo art!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="haha truck goes brrrrrrrr" src="/images/doujinsoft/diy-hero.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After 5 years without it, DoujinSoft now also has proper &lt;em&gt;blurred previews&lt;/em&gt; for NSFW content.&lt;br&gt;
You can disable those if you want. &lt;sub&gt;&lt;sup&gt;And yes you can play them in the web player&lt;/sup&gt;&lt;/sub&gt;&lt;br&gt;
Flagging NSFW content in the database is an ongoing work, so if you find some unblurred stuff make sure to let me know!  &lt;/p&gt;
&lt;p&gt;The collection minigame player is limited to the prebuild collections for now, but I hope to &lt;em&gt;eventually&lt;/em&gt; add a feature to allow people to craft their own collections/playlists and share them via QR codes or similar.&lt;br&gt;
Maybe I'll put up a &lt;em&gt;Halloween microgame playlist&lt;/em&gt; for people to enjoy? Let me know if you have any spooky games you like. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://hacktoberfest.com/"&gt;Hacktoberfest&lt;/a&gt; has just started&lt;/strong&gt;, so if you want to contribute to the DoujinSoft experience &lt;strong&gt;yourself&lt;/strong&gt;, I'll gladly accept any help, and you can get a shirt out of it! &lt;sub&gt;&lt;sup&gt;Please!&lt;/sub&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;Apart from that uhhhh  &lt;/p&gt;
&lt;h3&gt;Some General system stability improvements have been made to enhance the user's experience.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://diy.tvc-16.science/"&gt;Please enjoy!&lt;/a&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="nintendo"></category><category term="wii"></category><category term="wiiconnect24"></category><category term="riiconnect24"></category><category term="warioware"></category><category term="doujinsoft"></category><category term="mio"></category></entry><entry><title>Stylophone 2.5 is now out for Windows...and iOS!</title><link href="https://tvc-16.science/stylophone-25.html" rel="alternate"></link><published>2022-09-17T00:00:00+02:00</published><updated>2022-09-17T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2022-09-17:/stylophone-25.html</id><summary type="html">&lt;p&gt;I'm coming for &lt;strong&gt;your&lt;/strong&gt; dynamic island!&lt;/p&gt;</summary><content type="html">&lt;p&gt;It only took me &lt;a href="./stylophone-2.html"&gt;a year&lt;/a&gt;, but Stylophone is finally available on iOS and iPadOS!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Stylophone 2.5 on iPad" src="https://tvc-16.science/images/stylophone/v25-ipad.jpg"&gt;&lt;br&gt;
It looks quite similar to the Windows version, doesn't it?&lt;br&gt;
&lt;img alt="Stylophone 2.5 on Windows" src="https://tvc-16.science/images/stylophone/v25-win.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Version 2.5 is now available on both the &lt;em&gt;Microsoft Store&lt;/em&gt; for the UWP version, and the &lt;em&gt;App Store&lt;/em&gt; for your iDevices.&lt;br&gt;
(And of course, still open source on &lt;a href="https://github.com/Difegue/Stylophone/releases/tag/2.5.4"&gt;GitHub&lt;/a&gt;!)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.microsoft.com/store/apps/9NCB693428T8?cid=storebadge&amp;amp;ocid=badge"&gt;&lt;img src="https://get.microsoft.com/images/en-us%20dark.svg" width="200"/&gt;&lt;/a&gt; &lt;a href="https://apps.apple.com/us/app/stylophone/id1644672889?itsct=apps_box_link&amp;amp;itscg=30200"&gt;&lt;img src="https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg" width="216"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to a common .NET core codebase, both versions are &lt;strong&gt;near-identical&lt;/strong&gt; as far as features go.&lt;br&gt;
&lt;sub&gt;(iOS is missing Queue reordering! That'll come in time.)&lt;/sub&gt;  &lt;/p&gt;
&lt;p&gt;That includes &lt;strong&gt;Local Playback&lt;/strong&gt;, integration with System playback controls, and all that good stuff!&lt;br&gt;
The new iOS 16 Lockscreen looks particularly snazzy with Stylophone on it:&lt;br&gt;
&lt;img src="https://tvc-16.science/images/stylophone/v25-lockscreen.jpg" alt="Stylophone 2.5 on the iOS 16 Lock screen" width="300"/&gt;  &lt;/p&gt;
&lt;h1&gt;Multiplatform bonanza&lt;/h1&gt;
&lt;p&gt;I'm pretty stoked about breaking out into Apple Developer land!&lt;br&gt;
With the combined powers of UWP and UIKit, you can now manage your MPD server using Stylophone on:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10/11 PCs&lt;/li&gt;
&lt;li&gt;Xbox One/Series&lt;/li&gt;
&lt;li&gt;iPhone/iPad&lt;/li&gt;
&lt;li&gt;macOS, if using &lt;a href="https://developer.apple.com/macos/iphone-and-ipad-apps/"&gt;Apple Silicon&lt;/a&gt;.&lt;br&gt;
&lt;sub&gt;(Sadly, Apple TV/tvOS isn't as easy to develop for as the Xbox is..)&lt;/sub&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't have an ARM Mac to test the app on, but I did try chucking it in &lt;a href="https://developer.apple.com/mac-catalyst/"&gt;Mac Catalyst&lt;/a&gt; to see how it'd end up:&lt;br&gt;
&lt;img alt="Please do not dunk on my music tastes too hard" src="https://tvc-16.science/images/stylophone/v25-catalyst.jpg"&gt;&lt;br&gt;
Doesn't look too bad, and could probably be improved a little bit with some Mac-specific magic!  &lt;/p&gt;
&lt;p&gt;Catalyst support required Microsoft.iOS, aka the &lt;a href="https://github.com/xamarin/xamarin-macios/wiki/.NET-release-notes-Xcode-13.3"&gt;new version of Xamarin.iOS&lt;/a&gt;.&lt;br&gt;
As that new version changed TFMs, &lt;a href="https://code.videolan.org/videolan/LibVLCSharp/-/issues/346"&gt;LibVLC&lt;/a&gt; is currently broken on it; So no Catalyst for now!  &lt;/p&gt;
&lt;p&gt;I don't expect to support any additional platforms for the time being; Previous experiments with Uno and MAUI were &lt;a href="https://twitter.com/Difegue/status/1329221609652105217?ref_src=twsrc%5Etfw"&gt;painful&lt;/a&gt;.&lt;br&gt;
Xamarin.Android could be an interesting avenue, but I don't feel like developing for Android even though it's my daily driver...    &lt;/p&gt;
&lt;h1&gt;The icon changed (again)&lt;/h1&gt;
&lt;p&gt;If youuuuu can believe it, it's &lt;s&gt;a Friday&lt;/s&gt; &lt;a href="https://spline.design"&gt;Spline&lt;/a&gt; time once again!&lt;br&gt;
I've refined the existing icon design by giving it the 3D treatment.  &lt;/p&gt;
&lt;p&gt;&lt;img src="https://tvc-16.science/images/stylophone/v25-icon.png" width="256"/&gt;
&lt;sub&gt;Hey, the S from the &lt;a href="https://tvc-16.science/images/stylophone/styloicon.jpg"&gt;v1 icon&lt;/a&gt; is back! Can't this guy make up his mind for once?&lt;/sub&gt;  &lt;/p&gt;
&lt;p&gt;A far cry from the 2020 MS Office ripoff icon -- Playing with materials in 3D is fun!&lt;br&gt;
Here are a few other iterations and abominations:&lt;br&gt;
&lt;img alt="That lower left one is some Gucci shit I tell you what" src="https://tvc-16.science/images/stylophone/v25-icontests.png"&gt;  &lt;/p&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;&lt;img alt="funny gnu meme man" src="https://tvc-16.science/images/rmshacking.png"&gt;&lt;br&gt;
&lt;em&gt;Actually, we encourage people who redistribute free software to charge as much as they wish or can.&lt;/em&gt;&lt;br&gt;
- &lt;a href="https://www.gnu.org/philosophy/selling.en.html"&gt;Free Software Foundation&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;While Stylophone itself is open-source software, I charge for it on both Stores;&lt;br&gt;
You get &lt;em&gt;easy updates&lt;/em&gt;, and I get to make back the $99 &lt;strong&gt;[FRUIT COMPUTING COMPANY]&lt;/strong&gt; took from me.  &lt;/p&gt;
&lt;p&gt;However, to celebrate the iOS release, the UWP/Windows version is currently &lt;a href="https://www.microsoft.com/store/apps/9NCB693428T8?cid=storebadge&amp;amp;ocid=badge"&gt;&lt;strong&gt;[50% OFF!]&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
It also still has a free trial, so you can see if it's a good fit for you/your MPD server setup before buying.  &lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;sub&gt;...There is no cr&lt;a href="https://cutt.ly/LVu1GDo"&gt;o&lt;/a&gt;ss-buy.&lt;/sup&gt;&lt;/sub&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="mpd"></category><category term="xamarin"></category><category term="dotnet"></category><category term="c#"></category><category term="uwp"></category><category term="windows"></category><category term="ios"></category><category term="app store"></category><category term="music"></category><category term="client"></category><category term="stylophone"></category></entry><entry><title>Sonic McOrigins available at SAGE 2022!</title><link href="https://tvc-16.science/mcorigins.html" rel="alternate"></link><published>2022-09-02T00:00:00+02:00</published><updated>2022-09-02T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2022-09-02:/mcorigins.html</id><summary type="html">&lt;p&gt;heh get it it's like sonic origins but for fast food games god that's hilarious&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Sonic McOrigins timeline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="./lcdonald.html"&gt;Original announcement&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;2022 SAGE release (You are here)  &lt;/li&gt;
&lt;li&gt;&lt;a href="./mcorigins-plus.html"&gt;2023 "Plus" SAGE release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./mcorigins-xmas.html"&gt;Tony Hawk's McOrigins Plus Chrismtas&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a href="./mcorigins-xmas.html"&gt;here&lt;/a&gt; for the latest McOrigins-related post (and download links 🍟)  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Well, it's been 4 months since work started on that &lt;a href="./lcdonald.html"&gt;LCD simulator engine&lt;/a&gt;, and what's been done since then?  &lt;/p&gt;
&lt;h2&gt;17 games!&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Sonic McOrigins Mac screenshot" src="https://tvc-16.science/images/lcdonald/lcdmain.png"&gt;  &lt;/p&gt;
&lt;p&gt;I've digitized my entire collection, and found time to even get some extra ones off eBay to add to the SAGE build.&lt;br&gt;
(And yes, that includes &lt;a href="https://twitter.com/Difegue/status/1547953057660514304?s=20&amp;amp;t=hV9EoNuuFeQgdZ-T8SvxRg"&gt;Big's Fishing!&lt;/a&gt; It almost lived up to my 16-year hype.)  &lt;/p&gt;
&lt;h3&gt;You can now go grab the SAGE build at the matching &lt;a href="https://sonicfangameshq.com/forums/showcase/sonic-mcorigins.1352/"&gt;booth&lt;/a&gt;, for Windows, macOS, and Linux!&lt;/h3&gt;
&lt;p&gt;While I've already talked about the tech stack in the &lt;a href="./lcdonald.html"&gt;previous blogpost&lt;/a&gt;, here are a few extra words about the actual digitizing process, and other fun things I got to do along the way.&lt;br&gt;
So read on! (Or go have fun with the games and then read on, I'll be waiting)  &lt;/p&gt;
&lt;h1&gt;Digitizing them LCD Games (⚠️ jank warning)&lt;/h1&gt;
&lt;p&gt;The digitizing process was certainly the longest part of all this; Thankfully all of the McD LCD games are built the same (&lt;em&gt;read: extremely cheaply&lt;/em&gt;), so it was not necessarily difficult, just tedious.&lt;/p&gt;
&lt;p&gt;How to digitize a McD game you ask? I'll get to it, but first we must talk about &lt;strong&gt;voltage dividers&lt;/strong&gt;!&lt;br&gt;
&lt;img alt="I restrained myself from making a parallel universe joke up here but I can't hold it anymore! It's going in the alt text!" src="https://tvc-16.science/images/lcdonald/divider.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The McDonald LCD games all run off a 1.5V coin battery, and most of the batteries in my OG games were halfway dead/leaking.&lt;br&gt;
I &lt;em&gt;"could"&lt;/em&gt; have just gone and bought new batteries since they're replaceable (only in the &lt;a href="https://twitter.com/Difegue/status/1557107418810777600?s=20&amp;amp;t=hV9EoNuuFeQgdZ-T8SvxRg"&gt;European&lt;/a&gt; versions though!), but that'd be no fun.  &lt;/p&gt;
&lt;p&gt;A &lt;a href="https://electronics.stackexchange.com/questions/214200/converting-3-3v-to-1-2v"&gt;Voltage divider&lt;/a&gt; essentially allows you to get a lower voltage out of a higher one for small currents -- In this case the 5V coming out of a USB plug. This allows us to power the games with no batteries!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;"But m8"&lt;/em&gt; you might ask, &lt;em&gt;"why is there an Arduino chucked in the middle of this hot mess?"&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;If you've ever played a LCD handheld game, you might know than when the game is turned on, &lt;strong&gt;all the elements&lt;/strong&gt; will show up for a few seconds, then blank out so the game can be started.  &lt;/p&gt;
&lt;p&gt;Having all the elements shown at once is paramount to digitizing the game!&lt;br&gt;
It allows you to take a clean scan of all of them at once, which we can then turn into a vectorized graphic. The main issue is that you can't really take a good picture/scan in only two seconds.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;If only there was a way to have the game stay in that initial state forever...&lt;/em&gt;&lt;br&gt;
Well, that's exactly what the Arduino is here for, and it is &lt;strong&gt;atrocious!&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;RXLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The RX LED has a defined Arduino pin&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// put your setup code here, to run once:&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RXLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// power on&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RXLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="c1"&gt;// wait 2s&lt;/span&gt;
  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// power off&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RXLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="c1"&gt;// wait just long enough for the logic to reset but not the screen&lt;/span&gt;
  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Real engineers would probably hurl at the mere thought of using a 5$ microcontroller as a glorified timed power switch. But it works!&lt;br&gt;
Once the game disassembled and the background removed, it's now pretty easy to take a picture of the whole thing.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="sent from my iphone" src="https://tvc-16.science/images/lcdonald/se_closeup.jpg"&gt;&lt;br&gt;
...with an iPhone SE, which is the best close-up/macro camera I had on hand. &lt;sub&gt;I don't think I'm cut out for this preservation business lads&lt;/sub&gt;  &lt;/p&gt;
&lt;p&gt;The way the LCD screens are built in those games sadly prevents flatbed scanners from being used, so I used shots like this to vectorize the elements to SVG. Which wasn't that painful all things considered!  &lt;/p&gt;
&lt;p&gt;&lt;img src="https://tvc-16.science/images/lcdonald/bfishing.svg"/&gt;  &lt;/p&gt;
&lt;p&gt;The backgrounds are simple flat bits of cardboard, and those could be scanned easily.  &lt;/p&gt;
&lt;p&gt;As a fun side-note, there was one game where I didn't need to do any of this stuff, as it'd been ported to...&lt;a href="https://www.youtube.com/watch?v=jhkwLN6PUss"&gt;Flash&lt;/a&gt; back in 2005 for some weird cross-promotion.&lt;br&gt;
I didn't think I'd end up using a flash decompiler for this project, but here we are!&lt;br&gt;
&lt;img alt="finding a flash decompiler was surprisingly annoying" src="https://tvc-16.science/images/lcdonald/flashdecomp.jpg"&gt;  &lt;/p&gt;
&lt;h1&gt;The Icon&lt;/h1&gt;
&lt;p&gt;I used &lt;a href="https://spline.design/"&gt;Spline&lt;/a&gt; to make the icon:&lt;br&gt;
&lt;img alt="I have a soft spot for mac icons that have some elements break the squircle pattern" src="https://tvc-16.science/theme/img/mcd.png"&gt;  &lt;/p&gt;
&lt;p&gt;As with everything else related to this project, it looks more like an app than a fangame logo...&lt;br&gt;
I had this &lt;em&gt;"Sonic item monitor containing the mcdonald arches"&lt;/em&gt; idea stuck in my head, and I think it looks cool!  &lt;/p&gt;
&lt;p&gt;3D abstract forms are one of the easiest thing to make in Spline, so it seemed logical to use that to slap some Sonic box art shapes on top as well.&lt;br&gt;
&lt;img alt="Some icon alternatives" src="https://tvc-16.science/images/lcdonald/icons.jpg"&gt;&lt;br&gt;
&lt;sub&gt;&lt;sup&gt;The burger alt is in case mcd lawyers come after my ass&lt;/sup&gt;&lt;/sub&gt;  &lt;/p&gt;
&lt;p&gt;As another fun fact, the texture used for the box is the one from &lt;a href="https://www.models-resource.com/pc_computer/sonicgenerations/model/12800/"&gt;Generations.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Avalonia X-Plat UI fun&lt;/h1&gt;
&lt;p&gt;While &lt;a href="http://avaloniaui.net"&gt;Avalonia&lt;/a&gt; allows you to essentially have the same UI/UX on all operating systems, that doesn't mean you can't actually customize things a bit!&lt;/p&gt;
&lt;p&gt;I won't pretend to fully follow the Mac &lt;a href="https://developer.apple.com/design/human-interface-guidelines/macos/"&gt;HIG&lt;/a&gt; with this silly fangame either, but with some tweaks it's fairly easy to go from the default &lt;a href="https://github.com/amwx/FluentAvalonia"&gt;FluentAvalonia&lt;/a&gt; Windows-friendly look:&lt;br&gt;
&lt;img alt="Sonic McOrigins Windows screenshot" src="https://tvc-16.science/images/lcdonald/win.jpg"&gt;&lt;br&gt;
to a look that fits on the Mac:&lt;br&gt;
&lt;img alt="Sonic McOrigins Mac screenshot" src="https://tvc-16.science/images/lcdonald/mac.png"&gt;&lt;br&gt;
Instead of what it'd look like by default:&lt;br&gt;
&lt;img alt="Sonic McOrigins default Mac screenshot" src="https://tvc-16.science/images/lcdonald/mac_old.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;One might argue that this mostly works just because post Win-11 Windows and post-Big Sur macOS look similar in a &lt;em&gt;lot&lt;/em&gt; of ways, but I'll take the easy win here!  &lt;/p&gt;
&lt;p&gt;Modifying WinUI to fit on macOS does require some retemplating(notably to change the size of the menu items on the left there), but some simple resource overriding will already take you quite a few steps further:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// At app initialization&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OperatingSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsMacOS&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Macify the styling a bit&lt;/span&gt;
    &lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ControlContentThemeFontSize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Make the font size smaller&lt;/span&gt;
    &lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ContentControlThemeFontFamily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FontFamily&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SF Pro Text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Forbidden Apple font&lt;/span&gt;
    &lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ControlCornerRadius&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CornerRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// HIG corner radius&lt;/span&gt;
    &lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NavigationViewContentGridCornerRadius&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CornerRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Remove the navview corner radius so it looks like a straight line instead&lt;/span&gt;
    &lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NavigationViewExpandedPaneBackground&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transparent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NavigationViewDefaultPaneBackground&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transparent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// When instantiating your main window&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OperatingSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsMacOS&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// More Macification&lt;/span&gt;
    &lt;span class="n"&gt;NavigationView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PaneDisplayMode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NavigationViewPaneDisplayMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;NavigationView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenPaneLength&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;248&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Width of the menu&lt;/span&gt;
    &lt;span class="n"&gt;NavigationView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsPaneToggleButtonVisible&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Leftside menu is always open&lt;/span&gt;
    &lt;span class="n"&gt;NavigationView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PaneCustomContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Custom padding &lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;thm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AvaloniaLocator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FluentAvaloniaTheme&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thm&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;RequestedTheme&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Dark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Custom outer border to simulate macOS&amp;#39; dark theme window decoration -- Add this in XAML yourself!&lt;/span&gt;
        &lt;span class="n"&gt;MacWindowBorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsVisible&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another trick involved is to hide the (ugly) default title bar and use custom &lt;strong&gt;drag regions&lt;/strong&gt; to make the window draggable.&lt;br&gt;
You can check the &lt;a href="https://github.com/Difegue/LCDonald"&gt;actual source code&lt;/a&gt; if you're interested in learning more. 🧑‍💻  &lt;/p&gt;
&lt;p&gt;I didn't bother on doing something similar for Linux since it's not like Linux has a coherent design language to begin with! &lt;strong&gt;OHOHOHOHOHO&lt;/strong&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="sonic"></category><category term="mcdonalds"></category><category term="c#"></category><category term="avalonia"></category><category term=".net"></category><category term="lcd"></category><category term="game&amp;watch"></category><category term="video games"></category><category term="simulator"></category><category term="sage"></category></entry><entry><title>Introducing the McD's Sonic LCD Games Simulator</title><link href="https://tvc-16.science/lcdonald.html" rel="alternate"></link><published>2022-04-13T00:00:00+02:00</published><updated>2022-04-13T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2022-04-13:/lcdonald.html</id><summary type="html">&lt;p&gt;Yuji Naka: They probably eat McDonald's® hamburgers, I suppose? And I think they will get a complete line-up of Happy Meal® premiums.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Sonic McOrigins timeline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Original announcement (you are here)  &lt;/li&gt;
&lt;li&gt;&lt;a href="./mcorigins.html"&gt;2022 SAGE release&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="./mcorigins-plus.html"&gt;2023 "Plus" SAGE release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./mcorigins-xmas.html"&gt;Tony Hawk's McOrigins Plus Chrismtas&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a href="./mcorigins-xmas.html"&gt;here&lt;/a&gt; for the latest McOrigins-related post (and download links 🍟)  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;Happy Sonic 2 Movie release day!... Is what I'd say if I'd actually managed to publish this on April 8th.&lt;br&gt;
It's been a while since Sonic's last been that present in popular culture, and I think I only fully realized that fact upon seeing the new &lt;a href="https://www.sonicstadium.org/2022/03/more-mcdonalds-sonic-2-happy-meal-toys-leaked/"&gt;McDonald's toys&lt;/a&gt; planned for the movie.  &lt;/p&gt;
&lt;p&gt;While ol' McD's and Sonic have had a &lt;a href="https://www.sonicstadium.org/2019/02/how-mcdonalds-couldnt-keep-up-with-the-worlds-fastest-hedgehog/"&gt;long&lt;/a&gt; and &lt;a href="https://www.sonicstadium.org/2006/01/uk-mcdonalds-sonic-x-happy-meal-promotion-begins/"&gt;fruitful&lt;/a&gt; &lt;a href="http://info.sonicretro.org/Yuji_Naka_interview_by_Sega.com_(June_14,_2003)"&gt;relationship&lt;/a&gt;, there hasn't been a line of Sonic toys released since I was a kid all hyped up for the then-upcoming Sonic X and the Shadow spinoff. &lt;sub&gt;Blissful years&lt;/sub&gt;  &lt;/p&gt;
&lt;p&gt;Thinking that a brand new generation of kids will fall prey to Hedgehog fandom makes me feel slightly older, but it mostly motivated me to take out my old collection of &lt;a href="http://info.sonicretro.org/McDonald%27s_Sonic_LCD_games"&gt;Sonic McDonald's LCD games.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Have I made you proud, 12yo myself?" src="https://tvc-16.science/images/lcdonald/games.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Those games were released in 2005/2006 and are both pretty well known... and kinda obscure!&lt;br&gt;
15 years later, the built-in batteries have started corroding (which isn't that big a deal considering they're quite far from the electronics), and I think most people won't get to experience those games.  &lt;/p&gt;
&lt;p&gt;I've followed the &lt;a href="http://blog.archive.org/2018/03/18/some-very-entertaining-plastic-emulated-at-the-archive/"&gt;MAME LCD&lt;/a&gt; game emulation efforts for a little while now, and entertained the project of doing something similar with those Sonic games.&lt;br&gt;
I don't have the skills or hardware to do "real" emulation (&lt;a href="http://seanriddle.com/decap.html"&gt;processor decapping&lt;/a&gt; is a helluva thing), but I can certainly go as far as &lt;a href="https://github.com/BdR76/lcdgame.js#simulation-vs-emulation"&gt;simulation.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;And y'know, better do what you can do, right? So I'm happy to release a first alpha for my Sonic LCD simulator.&lt;br&gt;
&lt;img alt="Even when doing game stuff I can't help but make it look like a UWP app god damn" src="https://tvc-16.science/images/lcdonald/alpha1.jpg"&gt;  &lt;/p&gt;
&lt;h2&gt;Grab it &lt;a href="https://github.com/Difegue/LCDonald/releases"&gt;here&lt;/a&gt;!&lt;/h2&gt;
&lt;p&gt;(Windows only for now - I'll add Mac/Linux support later) &lt;/p&gt;
&lt;p&gt;I started out by simulating the (probably) most complex game of the collection, &lt;a href="http://info.sonicretro.org/Tails_Sky_Adventure"&gt;Tails' Sky Adventure&lt;/a&gt;.&lt;br&gt;
This &lt;em&gt;should&lt;/em&gt; ensure the simulator engine can handle all the other games, and well, haha Sonic 2 movie I guess! 
&lt;sub&gt;&lt;sup&gt;Although you might argue Knuckles played a bigger role in the movie but eh w/e&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;The simulator currently features dynamic view switching (so you can look at all those hires photos I took of the plastic things), and basic play/pause/stop controls. Keyboard only for now, although I'd like to add touch controls in the future.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="It does look nice tho" src="https://tvc-16.science/images/lcdonald/alpha2.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;I'd ideally like to have most of the games simulated in a beta for &lt;a href="https://twitter.com/SAGExpo/status/1513547421812363266?s=20&amp;amp;t=cxa2H5mMauV4-_UCdRy5NA"&gt;SAGE&lt;/a&gt;!&lt;br&gt;
We'll see how that goes.  &lt;/p&gt;
&lt;p&gt;If you'd like to help out by digitizing some games(my scanner isn't the best) or even coding a simulator, you can keep reading for some tech details. &lt;/p&gt;
&lt;h1&gt;Very Quick Technical Breakdown&lt;/h1&gt;
&lt;p&gt;For the layout of the games themselves, I decided to use the same format as &lt;a href="https://docs.mamedev.org/techspecs/layout_files.html"&gt;MAME&lt;/a&gt;.&lt;br&gt;
That makes it so that editing layout doesn't require any coding -- And in the off-chance some crazy dude actually decaps the games for real in the future, hopefully this'll lay the groundwork for integrating them to MAME.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- tskyadventure.lay --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;mamelayout&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Define Elements --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manual_fr&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;image&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tskyadventure_manual.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;front_open&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;image&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tskyadventure_front_open.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;front_closed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;image&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tskyadventure_front_closed.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;back_open&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;image&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tskyadventure_back_open.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;back_closed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;image&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tskyadventure_back_closed.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;game_bg&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;image&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tskyadventure_bg.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Define Views --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;view&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Front Open&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;screen&lt;/span&gt; &lt;span class="na"&gt;index=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;bounds&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1832&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1313&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;380&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/screen&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;front_open&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;bounds&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3959&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2639&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;game_bg&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;bounds&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1832&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1313&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;380&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/view&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;view&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Front Closed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;front_closed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;bounds&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3959&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2639&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/view&amp;gt;&lt;/span&gt;

    [...]

&lt;span class="nt"&gt;&amp;lt;/mamelayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The simulator itself runs on good ol' .NET -- While I decided to use &lt;a href="http://avaloniaui.net/"&gt;Avalonia&lt;/a&gt; for the front-facing app, the simulator core itself is separated &lt;a href="https://christianfindlay.com/2020/12/21/net-standard/"&gt;.NET Standard 2.1&lt;/a&gt;, and can run on anything .NET runs on.  &lt;/p&gt;
&lt;p&gt;In case you think I'm bloody insane for using a Desktop app framework for games, nothing's stopping you from dunking the core into Unity and making your own frontend! That might be fun.  &lt;/p&gt;
&lt;p&gt;Avalonia was interesting due to its easy SVG integration, which I considered critical for LCD game simulation.&lt;br&gt;
Once again copying what MAME does, the LCD layer is rendered as a SVG image, with specific groups toggled on and off depending on the game state.  &lt;/p&gt;
&lt;p&gt;&lt;img src="https://tvc-16.science/images/lcdonald/tskyadventure.svg"/&gt;&lt;br&gt;
☝️ Also SVGs weigh nothing, which helps offset a bit the huge sizes of the photos/scans of the simulated games.  &lt;/p&gt;
&lt;p&gt;In case you'd like to help, I've opened &lt;a href="https://github.com/Difegue/LCDonald/issues"&gt;tracking issues&lt;/a&gt; for each game!&lt;br&gt;
While I do own most of them, I don't have the manuals for most, and some of the games have eluded me for over 12 years, like &lt;a href="http://info.sonicretro.org/Big%27s_Fishing"&gt;Big's Fishing&lt;/a&gt;.&lt;br&gt;
The issues go into detail as to what I own for each game, and what'd be needed to integrate it into the simulator.  &lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</content><category term="Software"></category><category term="sonic"></category><category term="mcdonalds"></category><category term="c#"></category><category term="avalonia"></category><category term=".net"></category><category term="lcd"></category><category term="game&amp;watch"></category><category term="video games"></category><category term="simulator"></category></entry><entry><title>Display a X509 Certificate with SFCertificatePanel on Xamarin.Mac</title><link href="https://tvc-16.science/sfcertificate-mac-xamarin.html" rel="alternate"></link><published>2021-12-17T00:00:00+01:00</published><updated>2021-12-17T00:00:00+01:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2021-12-17:/sfcertificate-mac-xamarin.html</id><summary type="html">&lt;p&gt;Nobody ever cares about Certificate UIs...but I do. (Or at least I had to)&lt;/p&gt;</summary><content type="html">&lt;p&gt;Showing the details of a &lt;a href="https://en.wikipedia.org/wiki/X.509"&gt;X.509 certificate&lt;/a&gt; on Windows is fairly simple through the &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2ui?view=dotnet-plat-ext-6.0"&gt;X509Certificate2UI&lt;/a&gt; class, which wraps the native Win32 certificate UI:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="The Win32 certificate details window" src="https://tvc-16.science/images/certs/win32-cert.png"&gt;&lt;/p&gt;
&lt;p&gt;Doing the same on macOS proves to be much less documented, but not that hard!  &lt;/p&gt;
&lt;h1&gt;SFCertificatePanel&lt;/h1&gt;
&lt;p&gt;&lt;img alt="A SFCertificatePanel." src="https://tvc-16.science/images/certs/appkit-cert.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/securityinterface/sfcertificatepanel?language=objc"&gt;SFCertificatePanel&lt;/a&gt; is the AppKit class that handles displaying Certificates and certificate chains.  &lt;/p&gt;
&lt;p&gt;It's...not very well exposed but fairly easy to use:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Objective-C, show Modal&lt;/span&gt;
&lt;span class="c1"&gt;// trustCertificates is a NSArray of SecCertificate objects&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;SFCertificatePanel&lt;/span&gt; &lt;span class="n"&gt;sharedCertificatePanel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;runModalForCertificates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;trustCertificates&lt;/span&gt; &lt;span class="nl"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Swift, show Sheet in a parent window&lt;/span&gt;
&lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;certData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;//read certificate file&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cert&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SecCertificateCreateWithData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kCFAllocatorDefault&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certData&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;CFData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;SFCertificatePanel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;beginSheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modalDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didEnd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contextInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="p"&gt;!],&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Panel can show details for either a single &lt;a href="https://developer.apple.com/documentation/security/seccertificateref?language=objc"&gt;SecCertificate&lt;/a&gt;, an array of them symbolizing a Certificate chain, or a &lt;a href="https://developer.apple.com/documentation/security/sectrustref?language=objc"&gt;SecTrust&lt;/a&gt; object.&lt;/p&gt;
&lt;h1&gt;Usage from a Xamarin.Mac app&lt;/h1&gt;
&lt;p&gt;Sadly, Xamarin.Mac does not &lt;a href="https://github.com/xamarin/xamarin-macios/issues/4177"&gt;wrap the SecurityInterface&lt;/a&gt; library that contains this class, so we have to dig a bit deeper to call on it.  &lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;objc_msgSend&lt;/code&gt;, we can essentially &lt;a href="http://jonathanpeppers.com/Blog/xamarin-ios-under-the-hood-calling-objective-c-from-csharp"&gt;call Objective-C methods&lt;/a&gt; on any class we want, including the unwrapped ones:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SecurityInterface&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// https://developer.apple.com/documentation/securityinterface/sfcertificatepanel&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;_sfCertificatePanelClass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SFCertificatePanel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt; &lt;span class="n"&gt;_sharedCertificatePanelSelector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sharedCertificatePanel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt; &lt;span class="n"&gt;_runModalForCertificatesSelector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;runModalForCertificates:showGroup:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt; &lt;span class="n"&gt;_beginSheetForWindowSelector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;beginSheetForWindow:modalDelegate:didEndSelector:contextInfo:certificates:showGroup:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Since we&amp;#39;re not doing a full Xamarin binding project for SecurityInterface.framework,&lt;/span&gt;
        &lt;span class="c1"&gt;// We need to re-declare some of the ObjC messaging functions since they&amp;#39;re normally hidden from us.&lt;/span&gt;
        &lt;span class="c1"&gt;// (http://jonathanpeppers.com/Blog/xamarin-ios-under-the-hood-calling-objective-c-from-csharp)&lt;/span&gt;
&lt;span class="na"&gt;        [DllImport(Constants.ObjectiveCLibrary, EntryPoint = &amp;quot;objc_msgSend&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="nf"&gt;IntPtr_objc_msgSend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="na"&gt;        [DllImport(Constants.ObjectiveCLibrary, EntryPoint = &amp;quot;objc_msgSend&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;global&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nint&lt;/span&gt; &lt;span class="n"&gt;nint_objc_msgSend_IntPtr_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="na"&gt;        [DllImport(Constants.ObjectiveCLibrary, EntryPoint = &amp;quot;objc_msgSend&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;void_objc_msgSend_IntPtr_IntPtr_IntPtr_IntPtr_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;arg4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;arg5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;arg6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


        &lt;span class="c1"&gt;// + (SFCertificatePanel *)sharedCertificatePanel;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="nf"&gt;GetSharedCertificatePanel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;IntPtr_objc_msgSend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sfCertificatePanelClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_sharedCertificatePanelSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//- (NSInteger)runModalForCertificates:(NSArray *)certificates showGroup:(BOOL)showGroup;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;nint&lt;/span&gt; &lt;span class="nf"&gt;RunModalForCertificates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;nint_objc_msgSend_IntPtr_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_runModalForCertificatesSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// - (void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo certificates:(NSArray *)certificates showGroup:(BOOL)showGroup;&lt;/span&gt;
        &lt;span class="c1"&gt;// delegate, didEndSelector and contextInfo are unmapped. (IntPtr.Zero)&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;BeginCertificateSheetForWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;windowHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;void_objc_msgSend_IntPtr_IntPtr_IntPtr_IntPtr_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_beginSheetForWindowSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;windowHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(A full-on &lt;a href="https://docs.microsoft.com/en-us/xamarin/cross-platform/macios/binding/?context=xamarin/mac"&gt;Xamarin Binding Library&lt;/a&gt; would obviously be cleaner than this, but it's not worth the effort considering we're not using all of SecurityInterface...)  &lt;/p&gt;
&lt;p&gt;With those few methods on hand, we can easily invoke a SFCertificatePanel from .NET code:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DisplayCertificate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X509Certificate2&lt;/span&gt; &lt;span class="n"&gt;certificate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;windowParent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SecCertificate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Put the certificate in a NSArray for compliance with the API&lt;/span&gt;
      &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromNSObjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;certificatePanel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSharedCertificatePanel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;windowParent&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunModalForCertificates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginCertificateSheetForWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;windowParent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And things just work! Although there are a few issues...  &lt;/p&gt;
&lt;h2&gt;Mono and X509Certificate2&lt;/h2&gt;
&lt;p&gt;Since we're still using a version of Xamarin that relies on &lt;a href="https://github.com/mono/mono/blob/main/mcs/class/System/System.Security.Cryptography.X509Certificates/X509Certificate2.cs"&gt;Mono&lt;/a&gt; instead of .NET 6, the X509Certificate2 class isn't fully implemented and won't show full certificate chains:&lt;br&gt;
&lt;img alt="A lone, single certificate" src="https://tvc-16.science/images/certs/no-chain.png"&gt;&lt;br&gt;
This is troublesome if you want to show a certificate chain where some intermediates are not in the system keychain: it will show as untrusted...even though the full chain is valid!  &lt;/p&gt;
&lt;p&gt;The easiest solution would be to move to .NET 6, but as that's not quite available yet, we have to bypass X509Certificate2 entirely and load the certificate using only macOS APIs:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pfx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="c1"&gt;// class that contains both path to a .pfx certificate file and its password &lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NSMutableDictionary&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [SecImportExport.Passphrase]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// ImportPkcs12 imports the given certificate to the Keychain by default.&lt;/span&gt;
    &lt;span class="c1"&gt;// Since we just want to check the certificate, we can avoid this behavior by setting ImportExportKeychain to nil.&lt;/span&gt;
    &lt;span class="c1"&gt;// (or an empty NSObject, since passing null isn&amp;#39;t allowed here)&lt;/span&gt;
&lt;span class="na"&gt;    [new NSString(&amp;quot;kSecImportExportKeychain&amp;quot;)]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NSObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Use SecImportExport to get SecCertificateRefs from the .pfx file&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SecImportExport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImportPkcs12&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilePath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SecStatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;certificateInfo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Get the chain as an array of SecCertificates&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;certificateInfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Proceed as we did before&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;certificatePanel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSharedCertificatePanel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;windowParent&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunModalForCertificates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginCertificateSheetForWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;windowParent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we get a full chain!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="A certificate and his family 😊" src="https://tvc-16.science/images/certs/yes-chain.png"&gt;  &lt;/p&gt;
&lt;p&gt;The first time, at least.&lt;/p&gt;
&lt;h2&gt;Showing the panel multiple times&lt;/h2&gt;
&lt;p&gt;There seems to be a weird bug with the shared Certificate Panel on Big Sur where if you show it multiple times, the top part showing the certificate chain doesn't show anymore and stays blank. 😔   &lt;/p&gt;
&lt;p&gt;To solve this, we have to &lt;strong&gt;instantiate&lt;/strong&gt; the panel each time we want to show it.&lt;br&gt;
This requires a few more modifications to our static SecurityInterface class:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Instantiate a SFCertificatePanel object, wrapped in the Xamarin container.&lt;/span&gt;
&lt;span class="c1"&gt;/// We can&amp;#39;t use sharedCertificatePanel: since it has display issues if we show a certificate chain multiple times.&lt;/span&gt;
&lt;span class="c1"&gt;/// &lt;/span&gt;
&lt;span class="c1"&gt;/// From the Apple documentation (https://developer.apple.com/documentation/securityinterface/sfcertificatepanel/1543245-shared): &lt;/span&gt;
&lt;span class="c1"&gt;/// If your application can display multiple certificate panels or sheets at once, you must allocate separate object instances&lt;/span&gt;
&lt;span class="c1"&gt;/// (using the alloc class method inherited from NSObject) and initialize them (using the init() instance method,&lt;/span&gt;
&lt;span class="c1"&gt;/// also inherited from NSObject) instead of using this class method.&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSObject&lt;/span&gt; &lt;span class="nf"&gt;CreateCertificatePanel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetNSObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;IntPtr_objc_msgSend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPtr_objc_msgSend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sfCertificatePanelClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alloc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;Selector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="c1"&gt;//- (NSInteger)runModalForCertificates:(NSArray *)certificates showGroup:(BOOL)showGroup;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;nint&lt;/span&gt; &lt;span class="nf"&gt;RunModalForCertificates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt; &lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;nint_objc_msgSend_IntPtr_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_runModalForCertificatesSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// - (void)beginSheetForWindow:(NSWindow *)docWindow modalDelegate:(id)delegate didEndSelector:(SEL)didEndSelector contextInfo:(void *)contextInfo certificates:(NSArray *)certificates showGroup:(BOOL)showGroup;&lt;/span&gt;
&lt;span class="c1"&gt;// delegate, didEndSelector and contextInfo are unmapped. (IntPtr.Zero)&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;BeginCertificateSheetForWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt; &lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt; &lt;span class="n"&gt;windowHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;void_objc_msgSend_IntPtr_IntPtr_IntPtr_IntPtr_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_beginSheetForWindowSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;windowHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;showGroup&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this block of code, we now instantiate a SFCertificatePanel using the regular objc alloc/init selectors, and wrap it into a Xamarin NSObject to make the code &lt;em&gt;slightly&lt;/em&gt; clearer. (although it doesn't help that much...)  &lt;/p&gt;
&lt;p&gt;Using the new methods, we can now show the certificate panel multiple times without any issues:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Make sure to deinitialize the created CertificatePanel.&lt;/span&gt;
&lt;span class="c1"&gt;// We use xamarin&amp;#39;s built-in dispose for this, which calls the objc &amp;quot;release&amp;quot; selector on its own.&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;certificatePanel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateCertificatePanel&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;windowParent&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunModalForCertificates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;SecurityInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginCertificateSheetForWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;windowParent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;I added syntax highlighting to the blog after writing this article since all the giant blobs of &lt;code&gt;objc_msgSend&lt;/code&gt; are already unreadable enough 😅  &lt;/p&gt;
&lt;p&gt;It was simple enough:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pygmentize -S perldoc -f html -a .highlight &amp;gt; theme/static/css/pygment.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Followed by adding this new CSS into the headers of the template.  &lt;/p&gt;</content><category term="Software"></category><category term="macos"></category><category term="c#"></category><category term="xamarin"></category><category term=".net"></category><category term="certificate"></category><category term="sfcertificatepanel"></category><category term="x509certificate2ui"></category></entry><entry><title>Publishing MpcNET on NuGet.org (feat. Github Actions)</title><link href="https://tvc-16.science/mpcnet-nuget.html" rel="alternate"></link><published>2021-10-04T00:00:00+02:00</published><updated>2021-10-04T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2021-10-04:/mpcnet-nuget.html</id><summary type="html">&lt;p&gt;Build your own MPD ✨experiences✨ in pure .NET!&lt;/p&gt;</summary><content type="html">&lt;p&gt;While building &lt;a href="./stylophone.html"&gt;Stylophone&lt;/a&gt;, I based my initial work on the &lt;a href="https://github.com/glucaci/MpcNET"&gt;LibMpc.net&lt;/a&gt; library, which I forked and improved with support for:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MPD Command Lists&lt;/li&gt;
&lt;li&gt;Binary Responses for &lt;code&gt;albumart&lt;/code&gt; commands&lt;/li&gt;
&lt;li&gt;Various other commands that weren't implemented&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This put it a bit above existing offerings (well except &lt;a href="https://musicpd.org/libs/libmpdclient/"&gt;libmpdclient&lt;/a&gt; but that's not managed code), so I always wanted to release said fork as a standalone NuGet package.&lt;br&gt;
And well, &lt;a href="https://www.nuget.org/packages/MpcNET/"&gt;here we are!&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;This package auto-builds and auto-uploads through GitHub Actions, so hopefully I won't have to do too much maintenance. ✌️  &lt;/p&gt;
&lt;h1&gt;GitHub Actions Workflow&lt;/h1&gt;
&lt;p&gt;Generating the NuGet package itself is pretty easy: Just build and &lt;code&gt;dotnet pack&lt;/code&gt;!&lt;br&gt;
To automatically generate different version numbers for each commit, I've used the awesome &lt;a href="https://github.com/adamralph/minver"&gt;MinVer&lt;/a&gt; NuGet package.&lt;br&gt;
While it requires you to work with Git tags, I already do that for my release workflow, so it's 🆒!  &lt;/p&gt;
&lt;p&gt;NuGet automatically treats packages that have a prerelease string as &lt;a href="https://docs.microsoft.com/en-us/nuget/create-packages/prerelease-packages"&gt;pre-versions&lt;/a&gt;, but I didn't want to litter the NuGet repo with a package build for every commit...&lt;/p&gt;
&lt;p&gt;So I'm going to litter* &lt;a href="https://github.com/Difegue/MpcNET/packages"&gt;GitHub Packages&lt;/a&gt; instead!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="hee ho here we go" src="https://tvc-16.science/images/packages.png"&gt;  &lt;/p&gt;
&lt;p&gt;GH Packages pairs exceptionally well with Actions, since you can just use the provided &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; for everything:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build and Test MpcNET&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;windows-latest&lt;/span&gt;  

    &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;Solution_Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MpcNET&lt;/span&gt;    
      &lt;span class="nt"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Release&lt;/span&gt;     

    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;fetch-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup MSBuild.exe&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;microsoft/setup-msbuild@v1.0.2&lt;/span&gt;

    &lt;span class="c1"&gt;# Build package and upload to github packages&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build package&lt;/span&gt;
      &lt;span class="nt"&gt;working-directory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./Sources&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;dotnet nuget add source --username Difegue --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github &amp;quot;https://nuget.pkg.github.com/Difegue/index.json&amp;quot;&lt;/span&gt;
        &lt;span class="no"&gt;dotnet build $env:Solution_Name --configuration $env:Configuration&lt;/span&gt;
        &lt;span class="no"&gt;dotnet pack --configuration $env:Configuration -o ./ &lt;/span&gt;
        &lt;span class="no"&gt;dotnet nuget push *.nupkg  --api-key ${{ secrets.GITHUB_TOKEN }} --source &amp;quot;github&amp;quot; --skip-duplicate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For release packages, the recipe is essentially the same, except even simpler since we don't need to add GitHub as a source (We do need to add a nuget.org &lt;a href="https://www.nuget.org/account/apikeys"&gt;API Key&lt;/a&gt; to our repo secrets however):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;New Version Release&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
  &lt;span class="nt"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;published&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;windows-latest&lt;/span&gt;  

    &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;Solution_Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MpcNET&lt;/span&gt;    
      &lt;span class="nt"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Release&lt;/span&gt;     

    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;fetch-depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup MSBuild.exe&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;microsoft/setup-msbuild@v1.0.2&lt;/span&gt;

    &lt;span class="c1"&gt;# Build package and upload to nuget.org&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build package&lt;/span&gt;
      &lt;span class="nt"&gt;working-directory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./Sources&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;dotnet build $env:Solution_Name --configuration $env:Configuration&lt;/span&gt;
        &lt;span class="no"&gt;dotnet pack --configuration $env:Configuration -o ./&lt;/span&gt;
        &lt;span class="no"&gt;dotnet nuget push *.nupkg  --api-key ${{ secrets.NUGET_API }} --source &amp;quot;nuget.org&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;* I'm probably going to have to add the &lt;a href="https://github.com/marketplace/actions/delete-package-versions"&gt;Delete Package Versions&lt;/a&gt; action to the mix at some point to avoid overloading GH's storage space. 😥 We'll see how popular the lib gets on its own. 😗  &lt;/p&gt;
&lt;h1&gt;Extra Links&lt;/h1&gt;
&lt;p&gt;See here for a more detailed walkthrough of NuGet builds on Actions:&lt;br&gt;
&lt;a href="https://acraven.medium.com/a-nuget-package-workflow-using-github-actions-7da8c6557863"&gt;https://acraven.medium.com/a-nuget-package-workflow-using-github-actions-7da8c6557863&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;And here for explanations on MinVer: &lt;a href="https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/"&gt;https://rehansaeed.com/the-easiest-way-to-version-nuget-packages/&lt;/a&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="mpd"></category><category term="c#"></category><category term="nuget"></category><category term=".net"></category><category term="music"></category><category term="stylophone"></category><category term="github actions"></category></entry><entry><title>Announcing Stylophone v2</title><link href="https://tvc-16.science/stylophone-2.html" rel="alternate"></link><published>2021-09-01T00:00:00+02:00</published><updated>2021-09-01T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2021-09-01:/stylophone-2.html</id><summary type="html">&lt;p&gt;Timing both a visual refresh and a major refactoring in one? Don't mind if I do.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="./stylophone.html"&gt;Stylophone&lt;/a&gt; has been out for almost a year now, and has received as warm a welcome as I could've hoped in the (very) niche world of MPD clients.&lt;br&gt;
There's been more than 400 trials, and about 100 paid users, which makes this the first time I got any significant form of money from the Microsoft Store. 💰💰💰  &lt;/p&gt;
&lt;p&gt;Version 2 of the app has been in the works for a few months already, as I was expecting some form of rejuvenation in the UWP space due to WinUI 3/Windows App SDK. &lt;br&gt;
The &lt;a href="https://blogs.windows.com/windowsexperience/2021/06/24/introducing-windows-11/"&gt;Windows 11&lt;/a&gt; announcement delivered all of that and some!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Please do not dunk on my music tastes too hard" src="https://tvc-16.science/images/stylophone/v2-stylophone.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;As a part of &lt;a href="https://uwpcommunity.com/launch/"&gt;Launch 2021&lt;/a&gt;, I'm releasing &lt;strong&gt;Stylophone v2&lt;/strong&gt;, featuring :  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A fully rebuilt app, eliminating a bunch of bugs&lt;/li&gt;
&lt;li&gt;Complete restyling using WinUI 2.6 (The bottom area is finally not stuck in dark theme anymore 🙏)&lt;/li&gt;
&lt;li&gt;Support for password-protected MPD servers  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Playback&lt;/strong&gt; if your server has the httpd stream output enabled  &lt;/li&gt;
&lt;li&gt;Random shuffling of tracks from your library into the play queue  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V2 is now &lt;strong&gt;live&lt;/strong&gt; on &lt;a href="https://github.com/Difegue/Stylophone"&gt;GitHub&lt;/a&gt; and the &lt;a href="https://www.microsoft.com/store/apps/9NCB693428T8"&gt;Microsoft Store&lt;/a&gt;!  &lt;/p&gt;
&lt;div id="mspb-4eo0ll5vuo5c" class="9NCB693428T8"&gt;&lt;/div&gt;

&lt;script src="https://storebadge.azureedge.net/src/badge-1.8.4.js"&gt;&lt;/script&gt;

&lt;script&gt;
  mspb('9NCB693428T8', function(badge) {
    document.getElementById('mspb-4eo0ll5vuo5c').innerHTML = badge;
  });
&lt;/script&gt;

&lt;p&gt;I'll be rambling a bit more about what I did below.  &lt;/p&gt;
&lt;h1&gt;Windows 11 Redesign&lt;/h1&gt;
&lt;p&gt;In v2, I spaced most of the UI elements further, both to fit the new card-inspired design language of Windows 11 and to give some elements the extra breathing room they really needed.&lt;br&gt;
&lt;sub&gt;(Those image comparison sliders are iframes! If they're not showing up your browser might be blocking 'em for some reason. 🤔)&lt;/sub&gt;&lt;br&gt;
&lt;iframe frameborder="0" class="juxtapose" width="100%" height="640" src="https://cdn.knightlab.com/libs/juxtapose/latest/embed/index.html?uid=43f0a5f0-f7b9-11eb-abb7-b9a7ff2ee17c"&gt;&lt;/iframe&gt;&lt;br&gt;
v1's playback controls always felt borderline-claustrophobic to me, with the time slider &lt;em&gt;almost&lt;/em&gt; touching both the Play/Pause buttons and the window border.&lt;br&gt;
This comes at the loss of a bit of vertical space for the content, but I felt it was fine. (And if it's not, you can always enable compact sizing in the settings!)  &lt;/p&gt;
&lt;iframe frameborder="0" class="juxtapose" width="100%" height="640" src="https://cdn.knightlab.com/libs/juxtapose/latest/embed/index.html?uid=c567f9a8-f7b9-11eb-abb7-b9a7ff2ee17c"&gt;&lt;/iframe&gt;

&lt;p&gt;This time around, I've mostly &lt;strike&gt;copied&lt;/strike&gt; looked at the revamped Settings and Microsoft Store for inspiration. (There's not much else in terms of released WinUI 2.6 apps at the moment. 😛)  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="well at leasy it's not that weird S everyone used to draw in middle school" src="https://tvc-16.science/images/stylophone/v2-icon.png"&gt;&lt;/center&gt;&lt;br&gt;
I've also updated the icon! I liked v1's icon a lot, but it looked a bit too much like the MS Office icons. (A &lt;a href="https://www.microsoft.com/en-gb/p/quarrel-unofficial-discord-client/9nbrwj777c8r"&gt;recurring&lt;/a&gt; theme for &lt;a href="https://www.microsoft.com/fr-fr/p/flowpad/9pmt6j2wvb10?rtc"&gt;third-party&lt;/a&gt; Fluent Design &lt;a href="https://www.microsoft.com/fr-fr/p/yugen-mosaic/9pf0s24cx0d4"&gt;apps&lt;/a&gt; at the time for some reason)   &lt;/p&gt;
&lt;p&gt;It also looked kinda muddy at small sizes, so I've cleared it up and changed the shape to something...still generic, but more legible at small sizes. The "S" is much less noticeable, which I think is fine since it's kinda just a signature.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Comparison of the icons in the new Win11 Start Menu" src="https://tvc-16.science/images/stylophone/v2-iconstart.png"&gt;  &lt;/p&gt;
&lt;p&gt;If you preferred the old icon, well, how about buying &lt;a href="https://ko-fi.com/s/9fcf421b6e"&gt;a sticker of it&lt;/a&gt; to reminisce about the good old days? 😉  &lt;/p&gt;
&lt;h1&gt;(Re)building the app&lt;/h1&gt;
&lt;p&gt;The structure of the app has switched from &lt;strong&gt;2&lt;/strong&gt; projects to about &lt;strong&gt;5&lt;/strong&gt;:&lt;br&gt;
Alongside the existing &lt;em&gt;MpcNET&lt;/em&gt; library that's used to handle all the communication with MPD servers and the UWP project itself, I've split most of the core business functionality into a separate &lt;em&gt;.NET Standard&lt;/em&gt; class library, which can be reused outside of UWP easily. (More on that later)&lt;br&gt;
&lt;img src="https://tvc-16.science/images/stylophone/v2-structure.jpg" style="width:468px" /&gt;&lt;br&gt;
Achieving this was relatively easy(albeit time-consuming), as the app already uses the MVVM paradigm through the Community Toolkit's &lt;a href="https://docs.microsoft.com/en-us/windows/communitytoolkit/mvvm/introduction"&gt;MVVM library.&lt;/a&gt;&lt;br&gt;
The major switch I made was to use &lt;strong&gt;Dependency Injection&lt;/strong&gt;, which allows me to easily use the OS-specific services within the common ViewModel code, by simply injecting them as implementing the interface.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Under the Sycamore treee-wait crap wrong franchise" src="https://tvc-16.science/images/stylophone/v2-stylophone2.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Another big change I made was to handle all the album art decoding and storage in the .NET Standard portion of the code, using &lt;a href="https://github.com/mono/SkiaSharp"&gt;SkiaSharp.&lt;/a&gt;&lt;br&gt;
This allows me to &lt;strong&gt;greatly&lt;/strong&gt; cut into the amount of Dispatcher calls I had to make to use the native/UWP image functions, at no real performance loss. (And a great improvement to code readability.)  &lt;/p&gt;
&lt;p&gt;The new &lt;strong&gt;Local Playback&lt;/strong&gt; feature relies on the MPD server's &lt;a href="https://mpd.readthedocs.io/en/latest/plugins.html#httpd"&gt;&lt;em&gt;httpd&lt;/em&gt;&lt;/a&gt; output, which makes a nice stream we can consume and play back on the Windows machine.&lt;br&gt;
I used the UWP &lt;code&gt;MediaPlayer&lt;/code&gt; for this, which does the job well enough. Your mileage with this feature may vary, as I sadly have no way to figure out the encoding used by the server and use its default, which is &lt;code&gt;ogg&lt;/code&gt;.  &lt;/p&gt;
&lt;h1&gt;Ports?&lt;/h1&gt;
&lt;p&gt;As said above, I rebuilt the entire app to have as much .NET Standard code as possible.&lt;br&gt;
The main goal behind this was to &lt;strong&gt;port the app&lt;/strong&gt; to other platforms. I tried &lt;a href="https://platform.uno"&gt;Uno Platform&lt;/a&gt;, sadly walked back dissatisfied with the results (forced solution structure, lots of time wasted installing nuget package clones, etc), and tried elsewhere.  &lt;/p&gt;
&lt;p&gt;👉 My first look was at Xamarin Forms/MAUI: I quickly reached a working prototype but felt I wouldn't be happy with the UI options available and stopped there. (Besides, I don't really care about Android) 
&lt;img alt="ah yes, good old boring material design v1" src="https://tvc-16.science/images/stylophone/v2-xamarinforms.jpg"&gt;&lt;br&gt;
👉 I briefly considered &lt;a href="https://avaloniaui.net/"&gt;Avalonia&lt;/a&gt;, but I generally don't like UI frameworks that don't try to look native to the platform they're running on. (This has been greatly improved recently! I might take another stab at it one day.)  &lt;/p&gt;
&lt;p&gt;👉 In the end, I decided to try a port to &lt;strong&gt;iOS/UIKit&lt;/strong&gt;, using &lt;a href="https://github.com/xamarin/xamarin-macios"&gt;Xamarin.iOS&lt;/a&gt; whose macOS variant I was already familiar with.&lt;br&gt;
Y'know, just 'cause it'd be funny to port a UWP app to run on Apple's own twist on Universal Apps.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="my brain is about 200 years old probably" src="https://tvc-16.science/images/stylophone/v2-uikit.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;As you might see, I got a lot further with this port!&lt;br&gt;
This is all native iOS UI, powered by the &lt;strong&gt;same&lt;/strong&gt; .NET Standard core as the UWP app.&lt;br&gt;
I learned iOS development from scratch while doing this, which probably led to some bad decisions on the way. 😛  &lt;/p&gt;
&lt;p&gt;&lt;img alt="never stopping with the bowie references" src="https://tvc-16.science/images/stylophone/v2-uikit3.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;This is where I'd normally drop a surprise App Store link, but I'm not sure if the app actually looks good enough/would be successful on Apple devices?  &lt;br&gt;
&lt;sup&gt;&lt;sub&gt;And if I'd eventually make back the 90$ a year Apple charges for a developer license, good lord Microsoft has spoiled me with the one-time 100$ payment which I didn't even pay since I got a student deal back in 2013&lt;/sub&gt;&lt;/sup&gt;&lt;br&gt;
So, consider those screenshots kind of a pitch from me for the time being. 😅  &lt;/p&gt;
&lt;p&gt;It's &lt;a href="https://github.com/Difegue/Stylophone/tree/dev/Sources/Stylophone.iOS"&gt;open source&lt;/a&gt; just like the UWP variant, so if you like what you see, compile it and give it a try! It's about 80% finished.&lt;br&gt;
I might come back to it when Xamarin adds support for &lt;a href="https://github.com/xamarin/xamarin-macios/issues/6210"&gt;Mac Catalyst&lt;/a&gt;, as it'd allow me to target three platforms with this port.  &lt;/p&gt;
&lt;h1&gt;Closing words&lt;/h1&gt;
&lt;p&gt;Some line of code counts! It's not really a meaningful metric but it's fun:   &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Project&lt;/th&gt;
&lt;th&gt;LoC (C# only)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.NET Standard&lt;/td&gt;
&lt;td&gt;4963&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UWP&lt;/td&gt;
&lt;td&gt;3111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iOS/Xamarin&lt;/td&gt;
&lt;td&gt;4537&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The UIKit port needed a bit more glue code than I was expecting since unlike macOS/AppKit, UIKit doesn't really have a simple way to do data binding.&lt;br&gt;
(I'm aware of &lt;a href="https://developer.apple.com/documentation/combine"&gt;Combine&lt;/a&gt;, but Xamarin.iOS doesn't really allow you to write Swift at the time. 😔)&lt;br&gt;
&lt;img alt="The iOS UI is all storyboards btw, they're polarizing but I like em" src="https://tvc-16.science/images/stylophone/v2-uikit2.jpg"&gt;&lt;br&gt;
iOS has slide actions on rows which I find really cool and never really used before -- I think it's a bit too hard for users to find out about, though. 😐  &lt;/p&gt;</content><category term="Software"></category><category term="mpd"></category><category term="winui"></category><category term="c#"></category><category term="uwp"></category><category term="windows"></category><category term="windows 10"></category><category term="windows 11"></category><category term="music"></category><category term="client"></category><category term="stylophone"></category></entry><entry><title>Updating the TVC-16 to Caddy 2</title><link href="https://tvc-16.science/caddy-2-update.html" rel="alternate"></link><published>2021-07-06T22:00:00+02:00</published><updated>2021-07-06T22:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2021-07-06:/caddy-2-update.html</id><summary type="html">&lt;p&gt;Put on some music and spend a comfy evening whooping out some webhook wizardry. 🧙‍♂️&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://caddyserver.com/v2"&gt;Caddy 2&lt;/a&gt; has been out for a little more than a year and I finally got off my ass to update my server setup. 🤠&lt;br&gt;
Feel free to read the &lt;a href="./blogopolis-docker"&gt;OG post&lt;/a&gt; about the Caddy 1 setup to get some extra context.  &lt;/p&gt;
&lt;h1&gt;Updating the Caddyfile&lt;/h1&gt;
&lt;p&gt;For non-initiates, the &lt;a href="https://caddyserver.com/docs/caddyfile"&gt;Caddyfile&lt;/a&gt; is essentially the entire server configuration.
There's surprisingly little changes to it!&lt;br&gt;
I essentially went from something like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="err"&gt;/www/html&lt;/span&gt;
    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;repo&lt;/span&gt;     &lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;difegue&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;TVC&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;
        &lt;span class="nx"&gt;branch&lt;/span&gt;   &lt;span class="nx"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;
        &lt;span class="nx"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;unrelated&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;histories&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;recursive&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt; &lt;span class="nx"&gt;theirs&lt;/span&gt;
        &lt;span class="nx"&gt;hook&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;webhook&lt;/span&gt; &lt;span class="nx"&gt;mywebhooksecret&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;lrr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;diy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;dingus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7777&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;header_upstream&lt;/span&gt; &lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;header_upstream&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;header_upstream&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;header_upstream&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Proto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;/var/www/html&lt;/span&gt;
    &lt;span class="nx"&gt;file_server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;redir&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//tvc-16.science{uri}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;lrr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;reverse_proxy&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;diy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;reverse_proxy&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;dingus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tvc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;16.&lt;/span&gt;&lt;span class="nx"&gt;science&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tls&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;
    &lt;span class="nx"&gt;reverse_proxy&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7777&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;header_up&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;IP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;header_up&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Forwarded&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reverse proxies map as-is, and the configuration to make my &lt;a href="https://github.com/zgoat/goatcounter"&gt;GoatCounter&lt;/a&gt; instance work correctly is actually even simpler, since Caddy v2 passes &lt;a href="https://github.com/caddyserver/caddy/issues/2873"&gt;most headers through now.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;But as you might've noticed, the &lt;code&gt;git&lt;/code&gt; section which automatically updated the static pages you're reading right now...is gone! 👻&lt;/p&gt;
&lt;h1&gt;Swapping out my Webhook Implementation&lt;/h1&gt;
&lt;p&gt;As a quick refresher for how the &lt;code&gt;git&lt;/code&gt; integration worked (read the Caddy 1 post for more details!):  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the TVC-16 &lt;a href="https://github.com/Difegue/TVC-16"&gt;Git repo&lt;/a&gt; is updated, GitHub sends a &lt;code&gt;POST&lt;/code&gt; request to a &lt;code&gt;tvc-16.science&lt;/code&gt; subdomain, triggering a pull of the updated repo's &lt;code&gt;gh-pages&lt;/code&gt; branch, which contains the static HTML files for the blog, built with &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With Caddy 1, it was super easy to use the built-in &lt;a href="https://web.archive.org/web/20190131203258/https://caddyserver.com/docs/http.git"&gt;git plugin&lt;/a&gt; to setup a built-in webhook endpoint that Github could then hit. Sadly, Caddy 2 doesn't bundle a git plugin anymore! 😢  &lt;/p&gt;
&lt;p&gt;You can use a &lt;a href="https://caddy.community/t/v2-git-webhooks/10207"&gt;community one&lt;/a&gt; if you build your Caddy yourself (&lt;code&gt;xcaddy&lt;/code&gt; is a very nice tool to do that), but I don't really fancy rebuilding my webserver myself whenever I want to update.  &lt;/p&gt;
&lt;p&gt;So, I switched to a &lt;strong&gt;standalone server&lt;/strong&gt; to handle webhooks!&lt;br&gt;
To keep with the theme of &lt;em&gt;"I guess I'm using stuff written in Go now"&lt;/em&gt;, I went with &lt;a href="https://github.com/adnanh/webhook"&gt;webhook.&lt;/a&gt; &lt;sub&gt;very original name and not confusing at all thanks&lt;/sub&gt;&lt;br&gt;
&lt;code&gt;webhook&lt;/code&gt; is sadly a bit more verbose to setup than the ole Caddy integration, but the overall concept is the same:  &lt;/p&gt;
&lt;p&gt;1️⃣ Setup your hook's ID and rules in a &lt;code&gt;hooks.json&lt;/code&gt; file, to run a git pull in &lt;code&gt;/var/www/html&lt;/code&gt; when it's hit:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mikon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;execute-command&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/update_static.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;command-working-directory&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/var/www/html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;trigger-rule&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;and&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;payload-hash-sha1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;TheWebHookSecret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="s2"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;X-Hub-Signature&amp;quot;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;refs/heads/gh-pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;parameter&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="s2"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;payload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's easier to use a bash script as the &lt;code&gt;execute-command&lt;/code&gt; here since &lt;code&gt;webhook&lt;/code&gt; doesn't accept inline arguments, but the script itself is just a one-liner:  &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# This runs in /var/www/html, which already contains an initialized copy of the git repo.&lt;/span&gt;
git pull --allow-unrelated-histories -s recursive -X theirs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;2️⃣ Start the &lt;code&gt;webhook&lt;/code&gt; server:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;webhook -hooks hooks.json -port 4000 -verbose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3️⃣ Add a subdomain to your website and your Caddyfile to reverse-proxy it:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;tamamo.tvc-16.science {&lt;/span&gt;
&lt;span class="err"&gt;    tls *******&lt;/span&gt;
&lt;span class="err"&gt;    reverse_proxy localhost:4000&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4️⃣ Add the webhook to your GitHub repo, and you're done!  &lt;/p&gt;
&lt;p&gt;Since it goes through Caddy, you get SSL verification that &lt;em&gt;just works&lt;/em&gt; out of the box.&lt;br&gt;
&lt;img alt="🦊 mikon!" src="https://tvc-16.science/images/webhook.png"&gt;&lt;br&gt;
GitHub actually sends &lt;em&gt;two&lt;/em&gt; POST requests (one when &lt;code&gt;master&lt;/code&gt; is pushed, and one when &lt;code&gt;gh-pages&lt;/code&gt; is updated by GitHub Actions), but &lt;code&gt;webhook&lt;/code&gt; will filter the first one out since it doesn't match the &lt;code&gt;refs/heads/gh-pages&lt;/code&gt; rule.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webhook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;8a4b2a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mikon&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webhook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Started&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mikon&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webhook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b556e5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incoming&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HTTP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webhook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b556e5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mikon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webhook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b556e5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mikon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;but&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;didn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;triggered&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trigger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;were&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;satisfied&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;webhook&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Completed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;11.868297&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;I was kinda worried about redoing the autodeploy setup as Caddy 2 doesn't support it out of the box, but &lt;code&gt;webhook&lt;/code&gt; seems to be a solid alternative.&lt;br&gt;
Not having to replace it again whenever I end up re-switching HTTP servers is also a bonus!  &lt;/p&gt;
&lt;p&gt;The usual way of deploying this static blog stuff is to do the Pelican build on the host machine directly instead of using CI, but I prefer putting the grunt work outside of this woefully underpowered 3$ VPS that's already running about 5 services too many.  &lt;/p&gt;
&lt;p&gt;Here's a Tamamo for having made it to the end.&lt;br&gt;
&lt;img alt="UNIXCHADS win yet again!" src="https://tvc-16.science/images/tamamo.jpg"&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="docker"></category><category term="goatcounter"></category><category term="caddy"></category><category term="webhook"></category></entry><entry><title>That one time I wrote a memory patcher for an Android Emulator to keep playing FGO</title><link href="https://tvc-16.science/memu-patcher.html" rel="alternate"></link><published>2021-04-23T00:00:00+02:00</published><updated>2021-04-23T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2021-04-23:/memu-patcher.html</id><summary type="html">&lt;p&gt;Why yes, I was the hacker known as 4chan this entire time!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been playing Fate/Grand Order for a pretty long time now, and have irredeemably fallen into &lt;a href="https://twitter.com/Difegue/status/1289636218578378752"&gt;deep gambling addiction&lt;/a&gt;.&lt;br&gt;
Besides the whole "paying for coomer JPEGs" thing, FGO often relies on heavy farming to get a bunch of resources.&lt;sup&gt;&lt;sub&gt;Regular mobage trite really&lt;/sup&gt;&lt;/sub&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="I haven't actually paid money for most of this it's just been already 5 years good lord save me type-moon release something else already" src="https://tvc-16.science/images/memupatcher/fgo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;While I do enjoy the gameplay to a point, repeating a battle 300 times is not fun no matter how you try to spin it...&lt;br&gt;
For a while, the easiest way to automate farming in FGO was to throw the game on an &lt;strong&gt;Android emulator&lt;/strong&gt; and run a &lt;a href="https://github.com/29988122/Fate-Grand-Order_Lua"&gt;Lua script&lt;/a&gt; on it.&lt;br&gt;
Alas, FGO is also quite known for its hate of &lt;strong&gt;&lt;a href="https://topjohnwu.medium.com/from-anime-game-to-android-system-security-vulnerability-9b955a182f20"&gt;any form of game/phone modification.&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;sup&gt;(I very much recommend reading this article if you haven't already done so, it'll be more interesting than anything written here.)&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;At some point during the sweet summer of 2017, FGO stopped working on most famous emulator used to run it, &lt;a href="https://www.memuplay.com"&gt;Memu&lt;/a&gt;.&lt;br&gt;
The developers had implemented some extra checks for it when the game launches.&lt;br&gt;
Back then I was temporarily without a decent phone as well, so the incentive to get the bloody thing working again was quite high. &lt;sup&gt;Never underestimate what someone can do for his vidyagames and login streaks...&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;Surprisingly, the checks were quite easy to circumvent, as they were only looking for &lt;strong&gt;specific identifiers&lt;/strong&gt;, which could be replaced in the emulator's memory directly with a hex editor:&lt;br&gt;
&lt;script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2FDifegue%2FChaotic-Realm%2Fblob%2Fmaster%2FMemuPatcher%2FUnlimitedMemuWorks%2FForm1.cs%23L20-L24&amp;style=github&amp;showBorder=on&amp;showLineNumbers=on&amp;showFileMeta=on&amp;showCopy=on"&gt;&lt;/script&gt;  &lt;sub&gt;&lt;sup&gt;Somehow doing a grand-scale string replacement in-memory like that didn't completely crash the thing, which is kinda impressive I guess?&lt;/sub&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;I take no credit for figuring that one out, it came out of some &lt;a href="https://github.com/wDCat/ANRC/issues/98"&gt;dudes on github&lt;/a&gt;, who promptly decided to hide/delete it, thinking it'd make the trick last longer.&lt;br&gt;
&lt;img alt="Imagine thinking that essentially performing brain surgery on a live emulator is a reliable and permanent fix" src="https://tvc-16.science/images/memupatcher/sikritclub.png"&gt;&lt;br&gt;
Oh, those &lt;em&gt;absolute, utter dinguses.&lt;/em&gt;&lt;br&gt;
&lt;img alt="get a load of this freakin guy" src="https://tvc-16.science/images/memupatcher/lmao.gif"&gt;&lt;br&gt;
The method was obviously screenshotted and spread around on various boards.&lt;br&gt;
It worked, but busting out HxD everyime you wanted to run your farming script? 100% pain.  &lt;/p&gt;
&lt;p&gt;The Github thread was starting to look like a mid-2000's warez forum with everyone begging for the method through Facebook by this point(seriously go flip through it it's unreal), which made me think things could be improved somewhat.  &lt;/p&gt;
&lt;p&gt;So with the following goals in mind:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Destroying the secret club for the sole purpose of spreading chaos over the land  &lt;/li&gt;
&lt;li&gt;Making my own life easier so I could farm the upcoming Nerofest lottery in peace  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote an automated memory patcher in .NET/WinForms in a few days:&lt;br&gt;
&lt;img alt="I know there's a bunch of fucks but what can I say this was released anonymously" src="https://tvc-16.science/images/memupatcher/patcher.png"&gt;&lt;br&gt;
I say .NET, but this is almost more P/Invoke than interpreted considering all the patching code goes through Win32's &lt;code&gt;VirtualQueryEx/ReadProcessMemory/WriteProcessMemory&lt;/code&gt; calls. ¯\_(ツ)_/¯  &lt;/p&gt;
&lt;p&gt;Releasing this thing anonymously into the wild was especially funny, with various reactions such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FUD about the patcher being malware despite being uploaded with the source code attached  &lt;/li&gt;
&lt;li&gt;Reddit tutorials being written referring to the program as the &lt;a href="https://www.reddit.com/r/grandorder/comments/6wi08i/episode_xiii_doom_or_be_doomed/dm89feh/"&gt;"Patchouli Patcher"&lt;/a&gt; since I had &lt;a href="https://tvc-16.science/images/memupatcher/suofile.png"&gt;accidentally left my .vs folder in the uploaded code&lt;/a&gt; like an idiot&lt;/li&gt;
&lt;li&gt;FUD about the patcher &lt;a href="https://pastebin.com/U7qb6Jbh"&gt;getting your FGO account potentially banned&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;People begging for support screaming that they did buy Sonic Mania (sega should pay me for all this free advertising I gave them)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Real evidence of said begging not staged" src="images/memupatcher/mania.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;I never got it to reliably work on Windows 7/8, but nonetheless it seemed to be quite popular! (Looking back at the source, I suspect there's something wrong with my usage of &lt;code&gt;SYSTEM_INFO&lt;/code&gt;.)&lt;br&gt;
Most importantly, it spread the method around so other people could implement it in Cheat Engine or similar.  &lt;/p&gt;
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;As a result, I got my share of anonymous hacker fame, saved some login streaks (including the guy &lt;a href="https://github.com/wDCat/ANRC/issues/110"&gt;making the Lua farming script&lt;/a&gt; so yknow, what goes around comes around ✨), and autofarmed to my hearts' content until &lt;a href="https://www.bignox.com/"&gt;Nox&lt;/a&gt; got reliable FGO support, at which point I switched and never looked back. 👏  &lt;/p&gt;
&lt;p&gt;I've uploaded the latest version of the code I had here: &lt;a href="https://github.com/Difegue/Chaotic-Realm/tree/master/MemuPatcher"&gt;https://github.com/Difegue/Chaotic-Realm/tree/master/MemuPatcher&lt;/a&gt;&lt;br&gt;
I don't think this will be useful to anyone considering it's just a half-baked memory scanner and Cheat Engine literally does the same thing, but you might get a laugh out of it.  &lt;/p&gt;
&lt;p&gt;I think FGO still manages to block emulators every now and then, but I've entirely moved to just running &lt;a href="https://github.com/Fate-Grand-Automata/FGA"&gt;FGA&lt;/a&gt; on my phone instead of the Lua script these days, so I don't really care anymore.  &lt;/p&gt;</content><category term="Software"></category><category term="memu"></category><category term="android"></category><category term="patch"></category><category term="winforms"></category><category term="fgo"></category></entry><entry><title>Introducing Stylophone</title><link href="https://tvc-16.science/stylophone.html" rel="alternate"></link><published>2020-09-13T00:00:00+02:00</published><updated>2020-09-13T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2020-09-13:/stylophone.html</id><summary type="html">&lt;p&gt;A modern, native MPD client for the Universal Windows Platform.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.musicpd.org/"&gt;Music Player Daemon&lt;/a&gt; clients don't get much love on Windows.&lt;br&gt;
You're usually left with ports of whatever clients people have created for Linux, which usually involves GTK, Qt or other cross-platform control libraries which look like they're coming straight out of the Windows 7 era.  &lt;/p&gt;
&lt;p&gt;The only MPD client offering on the Microsoft Store is &lt;a href="https://www.microsoft.com/en-us/p/chimney/9wzdncrfj6jx"&gt;Chimney&lt;/a&gt;, which I'm pretty sure nobody remembers anymore due to the Store being utterly unsearchable. It works, but the Windows 8 aesthetic feels just as out of place nowadays...
&lt;img alt="Circled buttons? What *is* this, Windows Phone 7?" src="https://tvc-16.science/images/stylophone/chimney.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;I've used &lt;a href="https://github.com/CDrummond/cantata"&gt;Cantata&lt;/a&gt; for a long while as it was the only client left that was sorta-up-to-date, but it recently slipped into maintenance mode.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://persephone.fm/"&gt;Even macOS&lt;/a&gt; was getting a brand new native MPD client with Swift 'n bells 'n whistles! Enough!&lt;br&gt;
Making a new MPD client running on UWP/WinRT was a good way to check out how the platform's evolved since I last made RSS Live Tiles in 2017.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Soul Hackers is underrated soundtrack work from Shoji Meguro" src="https://tvc-16.science/images/stylophone/stylophone.png"&gt;  &lt;/p&gt;
&lt;p&gt;Stylophone is now &lt;strong&gt;live&lt;/strong&gt; on &lt;a href="https://github.com/Difegue/Stylophone"&gt;GitHub&lt;/a&gt; and on the &lt;a href="https://www.microsoft.com/store/apps/9NCB693428T8"&gt;Microsoft Store&lt;/a&gt;, so if you don't really care how the app was made you can stop reading and click on 👆👀☝  &lt;/p&gt;
&lt;h1&gt;Building the app&lt;/h1&gt;
&lt;p&gt;A .NET base for the client section thankfully already existed through &lt;a href="https://archive.codeplex.com/?p=libmpc"&gt;LibMpc.net&lt;/a&gt;, an ole' codeplex library which got reworked and improved upon through the years &lt;a href="https://github.com/glucaci/MpcNET"&gt;on Github.&lt;/a&gt;&lt;br&gt;
So Stylophone technically contains code from 2008, which is...not very important but nice!  &lt;/p&gt;
&lt;p&gt;To bootstrap the UWP app portion, I've been really impressed with the &lt;a href="https://docs.microsoft.com/en-us/windows/uwp/design/windows-template-studio/"&gt;Windows Template Studio&lt;/a&gt;, which allows you to prop up a skeleton and start coding app functionality straight away without having to reimplement &lt;code&gt;INotifyPropertyChanged&lt;/code&gt; and &lt;code&gt;BoolToVisibilityConverter&lt;/code&gt;s for the 9847563th time. A+ stuff.  &lt;/p&gt;
&lt;p&gt;I've also used the &lt;a href="https://github.com/windows-toolkit/WindowsCommunityToolkit"&gt;Windows Community Toolkit&lt;/a&gt; for a few real nice-to-haves, such as &lt;a href="https://github.com/windows-toolkit/WindowsCommunityToolkit/tree/master/Microsoft.Toolkit.Uwp.UI/Extensions/ScrollViewer"&gt;middle-mouse scrolling&lt;/a&gt; and listview headers.  &lt;/p&gt;
&lt;p&gt;The architecture is standard MVVM, with a few services for essential features such as navigation and listening to the MPD server through an idle connection.  &lt;/p&gt;
&lt;h1&gt;Design and name&lt;/h1&gt;
&lt;p&gt;Music players often appear in designer concepts, so I had &lt;a href="https://twitter.com/zeealeid/status/1262382516591345674"&gt;a lot&lt;/a&gt; of &lt;a href="https://twitter.com/ImShashankDogra/status/1144380971485057024"&gt;inspiration&lt;/a&gt; to &lt;a href="https://twitter.com/define_studio/status/1297163374812266496"&gt;choose from&lt;/a&gt;.&lt;br&gt;
Even on the &lt;a href="https://twitter.com/jsngr/status/1280619068794470402"&gt;macOS side,&lt;/a&gt; since they're also jumping on the "transparent sidebar" bandwagon now.&lt;br&gt;
&lt;sup&gt;&lt;sub&gt;Microsoft always does it first m8s&lt;/sub&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;For existing apps, I mostly looked at Groove Music, but also some existing UWP players like &lt;a href="https://github.com/DominicMaas/SoundByteOSS"&gt;SoundByte&lt;/a&gt; or &lt;a href="https://github.com/thecodrr/BreadPlayer"&gt;Bread Player.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Truth is, the compact view is entirely ripped off from SoundByte! God bless open source" src="https://tvc-16.science/images/stylophone/stylophone2.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The app uses WinUI 2 by default, although there are a few parts where I still needed stock Windows.UI.Xaml. (Mostly for background Acrylic)  &lt;/p&gt;
&lt;p&gt;The name was "FluentMPC" for the longest time, briefly became "Moroder" before I settled on "&lt;a href="https://en.wikipedia.org/wiki/Stylophone"&gt;Stylophone&lt;/a&gt;", referencing the lil' dingus toy instrument David Bowie used in &lt;em&gt;Space Oddity&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="It also served in Heathen(The Rays) which in my opinion is a better Bowie track but I'm probably alone on that" src="https://tvc-16.science/images/stylophone/styloicon.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The look of the instrument made for good inspiration as well when it came to making an icon.&lt;br&gt;
Starting from the same proportions as the modern office icons, I used the look of the metal latches as the pattern and heavily simplified the "S" from the original logo.  &lt;/p&gt;
&lt;p&gt;The resulting icon doesn't indicate whatsoever that this is a music-related application. 🤐&lt;br&gt;
But as someone who can't design, I like it!  &lt;/p&gt;
&lt;h1&gt;Essential features and tailoring the app&lt;/h1&gt;
&lt;p&gt;What I wanted most from an MPD client besides the obvious playback/playlist features was &lt;strong&gt;good album art handling.&lt;/strong&gt;&lt;br&gt;
Traditionally, MPD clients used to pull album art from outside sources like search engines or last.fm, as the server had no capacity to provide art to clients. This usually led to a bunch of false positives, and allowed said search engines to track what you listened to.  &lt;/p&gt;
&lt;p&gt;This changed &lt;a href="https://github.com/MusicPlayerDaemon/MPD/issues/42"&gt;recently&lt;/a&gt; with the &lt;code&gt;albumart&lt;/code&gt; command, which allows clients to pull binary data for cover art from the server.&lt;br&gt;
It only handles cover.jpg/png files in the same folder as the tracks for now, but a second command, &lt;code&gt;readpicture&lt;/code&gt;, is stated to come in MPD 0.22 to handle embedded art.  &lt;/p&gt;
&lt;p&gt;Stylophone handles both commands to build its album art cache, so it is future-proofed in that sense.  &lt;/p&gt;
&lt;p&gt;My second most-wanted "feature", if it can be called that, is a good &lt;em&gt;Now Playing&lt;/em&gt; view.&lt;br&gt;
I'd like to use Stylophone in a smart speaker setup later down the line, where it could show the current/next tracks on a touch screen alongside the basic playback controls.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Waiting for the Deadly Premonition 2 soundtrack..." src="https://tvc-16.science/images/stylophone/stylophone3.jpg"&gt;  &lt;/p&gt;
&lt;h1&gt;Closing words&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Actually, we encourage people who redistribute free software to charge as much as they wish or can.&lt;/em&gt;&lt;br&gt;
- &lt;a href="https://www.gnu.org/philosophy/selling.en.html"&gt;Free Software Foundation&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Stylophone currently costs 5 USD on the &lt;a href="https://www.microsoft.com/store/apps/9NCB693428T8"&gt;Microsoft Store&lt;/a&gt;.&lt;br&gt;
The entire app is free software under the MIT license so you can just compile it yourself if you don't want to pay. 👌&lt;br&gt;
I won't provide binaries in any other fashion at the moment since distributing UWP apps is just &lt;a href="https://github.com/microsoft/ProjectReunion/issues/128"&gt;annoying.&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;&lt;sub&gt;&lt;strike&gt;Although if you've read the article all the way to the end, you might just deserve a &lt;a href="http://go.microsoft.com/fwlink/?LinkId=532540&amp;amp;mstoken=CK394-4WW3G-DDJP6-2MC92-WP49Z"&gt;freebie!&lt;/a&gt;&lt;/strike&gt; It's over chief the promo code expired might make a new one someday&lt;/sup&gt;&lt;/sub&gt;  &lt;/p&gt;
&lt;p&gt;Maybe in a year or so, I'll be able to port the app to Mac, Linux and mobile throught the &lt;a href="https://platform.uno/blog/announncing-uno-platform-3-0-linux-support-fluent-material-and-more/"&gt;Uno Platform&lt;/a&gt;, giving me total dominion over the MPD client space.&lt;br&gt;
And endless anguish from having to support users from so many different platforms.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="John Carmack's inauguration speech has some great thoughts about the current state of computing you should go watch it" src="https://tvc-16.science/images/coolmeme.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;late 2020 edit&lt;/strong&gt;&lt;br&gt;
I guess the total dominion thing will have to wait a bit considering how Uno fares at the moment.  &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Tried cramming the Stylophone codebase into Uno Platform and it&amp;#39;s uhhhhhhhhhhhhhhhhhhhhhhhhhhh it can play songs I guess? &lt;a href="https://t.co/ZAmbOaN21E"&gt;pic.twitter.com/ZAmbOaN21E&lt;/a&gt;&lt;/p&gt;&amp;mdash; ＫＩＬＬＥＲ ＱＵＥＥＮ (@Difegue) &lt;a href="https://twitter.com/Difegue/status/1329221609652105217?ref_src=twsrc%5Etfw"&gt;November 19, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;  &lt;/p&gt;</content><category term="Software"></category><category term="mpd"></category><category term="winui"></category><category term="c#"></category><category term="uwp"></category><category term="windows"></category><category term="windows 10"></category><category term="music"></category><category term="client"></category><category term="stylophone"></category></entry><entry><title>More Wii Mail Madness</title><link href="https://tvc-16.science/more-wii-mail.html" rel="alternate"></link><published>2019-07-27T00:00:00+02:00</published><updated>2019-07-27T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2019-07-27:/more-wii-mail.html</id><summary type="html">&lt;p&gt;Exploring a few more weird usages of Wii Mail.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After launching &lt;a href="./doujinsoft-2.html"&gt;RiiConnect24 integration for DoujinSoft&lt;/a&gt; last month, I started receiving &lt;strong&gt;tons&lt;/strong&gt; of mail from Wii consoles over the world using the service. Some of it intended, some not at all!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="some fanmail" src="images/doujinsoft/fanmail.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In order to better handle messages that don't map to what I've described in my &lt;a href="./doujinsoft-rc24.html"&gt;previous breakdown&lt;/a&gt;, I have set up DoujinSoft to automatically forward them to my own Wii. This is a quick fly-by of the most interesting messages I've encountered.  &lt;/p&gt;
&lt;h1&gt;DIY Showcase Surveys&lt;/h1&gt;
&lt;p&gt;I briefly talked about the Surveys before. As they're related to WarioWare DIY, it makes sense that they'd be the messages I receive the most.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="surveyin" src="/images/survey.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Survey mail is dead simple(maybe even a bit too much):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w2939127336970027&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w5552226006146758&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0006&lt;/span&gt;&lt;span class="n"&gt;D000A711EE8DEA72B03BEF8CF&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;QUESTION&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AppId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;57413445&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3031&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IconNew&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;57413445&lt;/span&gt;
&lt;span class="n"&gt;MIME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mixed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boundary-NWC24-03BEF8CF0006D&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF8CF0006D&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;


&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF8CF0006D&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;octet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000109&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dat&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000109&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dat&lt;/span&gt;

&lt;span class="n"&gt;TXVzdHkgTWVsb24AAAAAAAAAAAAAAAAAAAEDBQ&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;


&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF8CF0006D&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once base64-decoded, the contents of the mail are as follow:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;4d6f 6e73 7465 7220 4d61 7468 0000 0000  Monster Math....&lt;/span&gt;
&lt;span class="err"&gt;0000 0000 0000 0000 0000 0507            ............```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The title of the game/manga/comic takes 25 bytes, followed by a byte for the type, a byte for the amount of stars it got, and a final byte for the id of the comment.  &lt;/p&gt;
&lt;p&gt;Since all the info you get about the initial item is its name and type, that makes it rather hard to map back to DoujinSoft's database -- There are a &lt;strong&gt;ton&lt;/strong&gt; of games named &lt;em&gt;Wario Quest&lt;/em&gt;, for example.&lt;br&gt;
For the time being, I'm just storing and showing survey data &lt;a href="https://diy.tvc-16.science/surveys"&gt;as is&lt;/a&gt; in DoujinSoft.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="surveyin on the information superhighway" src="/images/doujinsoft/survey-dsoft.png"&gt;  &lt;/p&gt;
&lt;h1&gt;Mii Parade&lt;/h1&gt;
&lt;p&gt;Remember the X-WiiFace header I used last time to add a Chuck Norris face to my messages?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w7720650706766587&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w1657786287988553&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;w6330930957365086&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;w1300677307397579&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;w4440069290024607&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;w7450179939585945&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;w4358193120538293&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;w7457852362831041&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;w2227537699606042&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;EB001B6DE412CFCAFB03BF2C29&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AppId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;48414341&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;WiiFace&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gADwfPB68GIAUABvAGsAZQAAAAAAAH80gScGhVFr2gMAAGZgAb0qggyL&lt;/span&gt;
 &lt;span class="n"&gt;ikAXIbSNAIoAiCzEAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;MIME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I was receiving mails of the sort very often - sometimes moreso than DIY Surveys.&lt;br&gt;
I initially thought it was just one dude sending his Mii to a lot of his friends at once...Except that makes no sense! There's no way for users to send mails to multiple people within the Wii Message Board.  &lt;/p&gt;
&lt;p&gt;So then, what could possibly prompt a Wii to broadcast Mii data like this to multiple consoles at once?&lt;br&gt;
My top-notch investigation skills led me to realize that it could only be the &lt;em&gt;Mii Parade&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="lotta miis" src="/images/MiiParade_01_en.gif"&gt;  &lt;/p&gt;
&lt;p&gt;Mii Parade was a feature of the Mii Channel which allowed you to automatically send your Miis to your friends, which in return would send you theirs.&lt;br&gt;
Miis received that way ended up in the Mii Parade, which allows up to apparently &lt;a href="https://youtube.com/watch?v=3iQi1LPntZg"&gt;&lt;strong&gt;10000 Miis.&lt;/strong&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;...I certainly never got that many back in 2008. Right now, the pool from all DoujinSoft users got me to about 250 Miis.  &lt;/p&gt;
&lt;h1&gt;Wii Speak Channel&lt;/h1&gt;
&lt;p&gt;This is my favorite one. The Wii Speak microphone was a USB accessory for the Wii, enabling voice chat in select games such as Monster Hunter Tri, The Conduit, or UNO. (Seriously, is there anything the Wii version of UNO &lt;em&gt;couldn't&lt;/em&gt; do?)  &lt;/p&gt;
&lt;p&gt;&lt;img alt="wii speakero" src="/images/WiiSpeakproduct.PNG"&gt;&lt;/p&gt;
&lt;p&gt;The accessory came bundled with a Wii Channel, appropriately dubbed... Wii Speak Channel.&lt;br&gt;
A feature of this channel I wasn't aware of was the possibility to send &lt;a href="https://www.youtube.com/watch?v=VWC1xyJqrtA"&gt;&lt;em&gt;voice messages&lt;/em&gt;&lt;/a&gt; to other Wiis. How cool is that? And more importantly, how does it abuse e-mails to make it happen?  &lt;/p&gt;
&lt;p&gt;&lt;img alt="aw shit here we go again" src="/images/wiispeak.jpg"&gt;&lt;/p&gt;
&lt;p&gt;You might remember from the previous breakdown that Wii E-Mails can embed custom stationery as an attachment, which in turn is interpreted and displayed by the Message Board.  &lt;/p&gt;
&lt;p&gt;This stationery can contain a custom envelope, a custom letterhead, and a custom &lt;strong&gt;sound&lt;/strong&gt; that plays when you open the message.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="wii speak message" src="/images/wiispeak_msg.jpg"&gt;&lt;/p&gt;
&lt;p&gt;You've probably already guessed how this works.&lt;br&gt;
This sound is usually just used for quick SFX, but here the Wii Speak Channel just crams the &lt;strong&gt;entire voice message&lt;/strong&gt; inside the stationery.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w7475328617225276&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w2227537699606042&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="n"&gt;A4001A8EC592CF1C3C03BF99EB&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AppId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;48434650&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3031&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00042019&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;WiiFace&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gAAASQB3AGEAdABhAAAAAAAAAAAAAGVUhl8KkW9KhAjlwFggSb0Kwlxu&lt;/span&gt;
 &lt;span class="n"&gt;CGBzWUCuSowAiiUEAE0AYQB0AHkAegB1AHoAdQAAAAA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;MIME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mixed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boundary-NWC24-03BF99EB000A4&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BF99EB000A4&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;

&lt;span class="n"&gt;AFYAbwB0AHIAZQAgAGEAbQBpACAAVwBpAGkAIABhACAAYwBvAG0AcABvAHMA6QAgAAoAYwBlACAA&lt;/span&gt;
&lt;span class="n"&gt;bQBlAHMAcwBhAGcAZQAgAGQAZQBwAHUAaQBzAAoAbABhACAAQwBoAGEA7gBuAGUAIABXAGkAaQAg&lt;/span&gt;
&lt;span class="n"&gt;AFMAcABlAGEAawAuAAoAUwBpACAAdgBvAHUAcwAgAHAAbwBzAHMA6QBkAGUAegAgAHYAbwB1AHMA&lt;/span&gt;
&lt;span class="n"&gt;IABhAHUAcwBzAGkAIABjAGUAdAB0AGUACgBjAGgAYQDuAG4AZQAsACAAcwDpAGwAZQBjAHQAaQBv&lt;/span&gt;
&lt;span class="n"&gt;AG4AbgBlAHoAIAAiAEQA6QBtAGEAcgByAGUAcgAiAAoAZQBuACAAYgBhAHMAIABkAGUAIABsACcA&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;QBjAHIAYQBuACAAcABvAHUAcgAgAHIA6QBwAG8AbgBkAHIAZQAgAOAACgB2AG8AdAByAGUAIABh&lt;/span&gt;
&lt;span class="n"&gt;AG0AaQAgAHAAYQByACAAdQBuACAAbQBlAHMAcwBhAGcAZQAgAGEAdQBkAGkAbwAuAAoAUwBpACAA&lt;/span&gt;
&lt;span class="n"&gt;dgBvAHUAcwAgAG4AZQAgAHAAbwBzAHMA6QBkAGUAegAgAHAAYQBzAAoAbABhACAAYwBoAGEA7gBu&lt;/span&gt;
&lt;span class="n"&gt;AGUAIABXAGkAaQAgAFMAcABlAGEAawAsAAoAcwDpAGwAZQBjAHQAaQBvAG4AbgBlAHoAIAAiAFIA&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;QBwAG8AbgBkAHIAZQAiAAoAcABvAHUAcgAgAOkAYwByAGkAcgBlACAAdQBuAGUAIAByAOkAcABv&lt;/span&gt;
&lt;span class="n"&gt;AG4AcwBlAAoA4AAgAHYAbwB0AHIAZQAgAGEAbQBpAC4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;


&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BF99EB000A4&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;msgboard&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000164&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wii&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000164&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wii&lt;/span&gt;

&lt;span class="n"&gt;Vao4LQAAACAAAABxAAAAoAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAUAAAABAAAAoAAAAJgA&lt;/span&gt;
&lt;span class="n"&gt;AAAMAAABQAAATbAAAAAaAABPAAAACMQAAAArAABX4AAATMAAY2hqdW1wLmJpbgBsZXR0ZXJfTFou&lt;/span&gt;
&lt;span class="o"&gt;[...&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="mi"&gt;740&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;stationery&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;U2XzPk&lt;/span&gt;&lt;span class="sr"&gt;/R9lROUs/k/k8fJTIAEPUQMBQ03H9eJKHicARD/g&lt;/span&gt;&lt;span class="n"&gt;rujgAAJGECDvTbmwFEBi4hLRrG8GQA&lt;/span&gt;
&lt;span class="n"&gt;vc358RMxQwKuABDf8Cw0Y5RbL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;XBMlQq1r1VHk8PJBDk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yQPDFJ01LQ78sIeMxMfcSDv3x4OIyTd&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;cwO3u4S3c8OvSzR4AHv6Kzf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wAA&lt;/span&gt;


&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BF99EB000A4&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;👀👀👀&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Gunpei_Yokoi#Lateral_Thinking_with_Withered_Technology"&gt;Lateral Thinking with Withered Technology&lt;/a&gt; applies to Wii Mail as a whole, but this is taking it to the next level.  &lt;/p&gt;
&lt;p&gt;The Wii Speak Channel allows a maximum of 10 seconds for voice messages, likely to prevent mails growing to outrageous sizes.&lt;br&gt;
I'm not sure if there's any limit on the Wii Message Board itself; Maybe I could update the DoujinSoft mail templates so that they play &lt;a href="https://www.youtube.com/watch?v=PX7zPlQjAr8"&gt;sanic.mp3&lt;/a&gt; whenever users open them.  &lt;/p&gt;</content><category term="Software"></category><category term="nintendo"></category><category term="wii"></category><category term="wiiconnect24"></category><category term="riiconnect24"></category><category term="mail"></category><category term="mii"></category></entry><entry><title>DoujinSoft x RiiConnect24 - A technical breakdown</title><link href="https://tvc-16.science/doujinsoft-rc24.html" rel="alternate"></link><published>2019-07-08T00:00:00+02:00</published><updated>2019-07-08T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2019-07-08:/doujinsoft-rc24.html</id><summary type="html">&lt;p&gt;Exploiting old Nintendo APIs for fun and profit.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently dug out the old DoujinSoft codebase to &lt;a href="/doujinsoft-2.html"&gt;interop with RiiConnect24&lt;/a&gt;.&lt;br&gt;
It's made in Java because I &lt;a href="https://github.com/Difegue/DoujinSoft/tree/master/libs-ext/diyedit/diyedit-jar/1.0"&gt;use a Swing GUI application as a dependency&lt;/a&gt; to handle all the WarioWare proprietary file-format decoding. You expecting me to learn reverse-engineering or something? 🐱‍👓  &lt;/p&gt;
&lt;p&gt;Thanks to the RiiConnect24 guys giving me the keys to the castle (a fake Wii friend number and some debug tools), I set out to finally give people an easy way to get games from DoujinSoft &lt;strong&gt;directly&lt;/strong&gt; to their console.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="d i r e c t l y" src="images/direct.gif"&gt;&lt;br&gt;
papa iwata this one's for you  &lt;/p&gt;
&lt;h2&gt;📧 A quick primer on WiiConnect24 📧&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;The flowing light on the Wii is timed with the bird call of the Japanese bush warbler.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;WiiConnect24 was the cool name given by Nintendo to half of the Wii's networking features. (The other half being Nintendo Wi-Fi Connection) According to marketing, all it does is download data when the Wii is in standby mode, but it actually handles a bit more than that, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The entire friend system  &lt;/li&gt;
&lt;li&gt;The &lt;a href="https://www.youtube.com/watch?v=afhwHfG0enY"&gt;Wii Message Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Receiving data from games or channels&lt;/li&gt;
&lt;li&gt;Executing a weird variant of JavaScript to handle said data&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiibrew.org/wiki/WiiConnect24"&gt;And some more junk&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The funny thing about WC24 is how it handles messaging: If you ever had a Wii back in 2006 you might have noticed you could add non-Wii devices as friends through their email address, and subsequently send and receive e-mail to/from them.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="has anyone ever added a cellphone to their friends tho" src="images/wiifriend.gif"&gt;&lt;br&gt;
PC users would see your Wii represented by a wxxxxxxxxxxxxxxxx@wii.com email address.&lt;br&gt;
I always thought it was really cool of Nintendo to implement this extra layer of communication to the console! I mean, they had to do some extra work for this whole email integration to work, right?  &lt;/p&gt;
&lt;p&gt;&lt;sup&gt;Right?&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;The truth is a bit more grounded and the opposite of my assumptions:&lt;br&gt;
All of WiiConnect24's messaging is handled by emails. &lt;strong&gt;All of it.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w7475328617225276&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w2227537699606042&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="n"&gt;A001A8EC592CF1C3C03BF08FA&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AppId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;48414541&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00044001&lt;/span&gt;
&lt;span class="n"&gt;MIME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;

&lt;span class="n"&gt;AEIAYQB6AGkAbgBnAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decodes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bazinga&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A message between two Wiis really is just an email with a few custom headers, as seen above.&lt;br&gt;
The upside is that this makes it extremely easy to understand how a game sends data, and how to fake it.&lt;/p&gt;
&lt;h2&gt;🤜 Being friends 🤛&lt;/h2&gt;
&lt;p&gt;For DoujinSoft to be able to send emails/content to other Wiis, said consoles must add our Wii number as a friend.&lt;br&gt;
Surprisingly and (probably)unlike Nintendo's future implementations, the server doesn't track who's friend with who; All negotiation is done directly between the consoles.  &lt;/p&gt;
&lt;p&gt;A Wii sending a friend request to another will send an email looking a bit like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w7475328617225276&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w2227537699606042&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;00066000&lt;/span&gt;&lt;span class="n"&gt;A711EE8DEA72B03BEF879&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WC24&lt;/span&gt; &lt;span class="n"&gt;Cmd&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; 
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AppId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;00000001&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt; 
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80010001&lt;/span&gt; 
&lt;span class="n"&gt;MIME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; 
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mixed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
 &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boundary-NWC24-03BEF87900066&amp;quot;&lt;/span&gt; 

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF87900066&lt;/span&gt; 

&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt; 
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; 

&lt;span class="n"&gt;WC24&lt;/span&gt; &lt;span class="n"&gt;Cmd&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; 

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF87900066&lt;/span&gt; 

&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;octet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000102&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dat&lt;/span&gt; 
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt; 
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
 &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000102&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dat&lt;/span&gt; 

&lt;span class="n"&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;/span&gt; 
&lt;span class="n"&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;/span&gt; 
&lt;span class="n"&gt;AAAAAAAAAAAAAAAAAAA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; 

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF87900066&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, Wii number 7475 3286 1722 5276 sent a friend request to Wii number 2227 5376 9960 6042.&lt;br&gt;
&lt;code&gt;X-Wii-AppId&lt;/code&gt; and &lt;code&gt;X-Wii-Cmd&lt;/code&gt; are changed from the defaults used in regular messages to inform WiiConnect24 this message is a Friend Request. (And therefore, it's not shown to the user on his console)  &lt;/p&gt;
&lt;p&gt;If the other Wii sends a similar message the other way then presto! The consoles are friends.&lt;br&gt;
&lt;img src="/images/utsuho-friends.jpg" style="width:300px" /&gt;&lt;br&gt;
As a result, this is pretty easy to replicate for DoujinSoft: When the user gives us the Wii number to send content to, we send this mail beforehand to act as the friend request.&lt;br&gt;
This approach requires the user to add our number to their console beforehand, which isn't too bothersome.  &lt;/p&gt;
&lt;h2&gt;🚚 Sending the goods over 🚛&lt;/h2&gt;
&lt;p&gt;If you've read the other article, you know that our final objective is to send WarioWare DIY content to other Wiis through WiiConnect24.&lt;br&gt;
You've probably guessed then that when sending content to your friends from the game, it actually sends... emails.  &lt;/p&gt;
&lt;p&gt;The example below is for a Record, the lightest content in DIY, weighing at 8KB. Makes for a shorter email here:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w7475328617225276&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w2227537699606042&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;00069000&lt;/span&gt;&lt;span class="n"&gt;A711EE8DEA72B03BEF889&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RR&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AppId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;57413445&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3031&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IconNew&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;57413445&lt;/span&gt;
&lt;span class="n"&gt;MIME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mixed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boundary-NWC24-03BEF88900069&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF88900069&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;


&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF88900069&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;octet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000105&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dat&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000105&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dat&lt;/span&gt;

&lt;span class="n"&gt;EAAgAAQRABEAAAABRFMATUlPX1MABxcAAAAHVxIA61cAU3tOaWdodCAMV2FsayAicARBSwMgR2Ft&lt;/span&gt;
&lt;span class="n"&gt;ZXOgEsAjBwAAd2904BPwEPAigOBIAQACBwEBABgAnxjwT7CZXGhpCHRuAFMgM6TA4QB2NuCREAAA&lt;/span&gt;
&lt;span class="n"&gt;dRkvnPAwwfBBAAYA8AAAGBEQDgwKCSAHBVAHAAIEBwwDDhATGP&lt;/span&gt;&lt;span class="c1"&gt;//oAHwH/DAIPAP8CHwM/8C/wMw&lt;/span&gt;
&lt;span class="sr"&gt;/wBAA5ALAP//AT4AAQD8ICMwA5ALMBMD2fCFgLcB8KPgtQMCEAFCAgABDgAALjHuERj//&lt;/span&gt;&lt;span class="n"&gt;wkQAjAH&lt;/span&gt;
&lt;span class="n"&gt;Ef8QrAELDgEPDAETABj&lt;/span&gt;&lt;span class="sr"&gt;/BbrAAwTAAxAjkAMHwAMF3QBZkAMAAFmQAxETAUEP/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;AHcSOxD5Ej8PPx&lt;/span&gt;
&lt;span class="n"&gt;qPG6sewQBAMBQRMqDAwv7TMCAP8A9gURBwD&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;DiELuHIiCcGX8QPwZAkABAAJDBAVEAwJBLEB7AIB&lt;/span&gt;
&lt;span class="n"&gt;YZADCf8VoAP&lt;/span&gt;&lt;span class="sr"&gt;/8RPxE/ET8RPytvLI8toRE10CYRMOQRMB1yACBwIufwoyGyI3EA0SKxATEBcSN/&lt;/span&gt;&lt;span class="n"&gt;yQ&lt;/span&gt;
&lt;span class="n"&gt;AxJLEk9S19I3Ul8H&lt;/span&gt;&lt;span class="sr"&gt;/38TIANSH3ELUSvyJ/In8ifz8ifzzPPe8/AEAvInAyf/&lt;/span&gt;&lt;span class="n"&gt;IRYwB7M7ESNQ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;wNj&lt;/span&gt;
&lt;span class="n"&gt;IAPQH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;PUVtA&lt;/span&gt;&lt;span class="sr"&gt;/URML/xcgA/M7//M7czt0T/M7FC/0T/&lt;/span&gt;&lt;span class="n"&gt;Tm9PjpsztUT3InEiIKCv8wB1USIPsPBV8N&lt;/span&gt;
&lt;span class="n"&gt;QiMGwAPr1F9SR1JPCMADBgBZkANvAQBZkAME9E&lt;/span&gt;&lt;span class="sr"&gt;/0T/RPZE//FX/&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;vYA9hL0T1RPAP8A9m0GEQcA&lt;/span&gt;
&lt;span class="sr"&gt;/g8hC3ZyCiXZ4JAD0QPmfgUKAQUKAQ0RFhENCgUF+GMDAWGQAwr/FqAD9WP/9WP1Y/&lt;/span&gt;&lt;span class="n"&gt;Vj9wb3GPcq&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;E8Yi9cB1yACCARNCzQ&lt;/span&gt;&lt;span class="sr"&gt;/IjcQDf8SKxATEBcSN5ADEksST1Ezx9I3Ul8I/xQgA1IfURP/USv2d/&lt;/span&gt;&lt;span class="n"&gt;Z3&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;nf2d&lt;/span&gt;&lt;span class="sr"&gt;/ga+Cz4Pv/0T0InIRYwB7M7ESNQ+wNj/yAD0B/YptA/URNXg9M794v/9E/3i/&lt;/span&gt;&lt;span class="n"&gt;RP&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;S75QPlS&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;E8as1sTIgoLBh0SJhMg&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ij&lt;/span&gt;&lt;span class="sr"&gt;/xI32G/UX1JHUk/4rzZ3Vn//15v0T/if+J/0T/&lt;/span&gt;&lt;span class="n"&gt;pC&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lT6Zvv4nxvH&lt;/span&gt;
&lt;span class="n"&gt;CaMnjjAHECmvesJwC&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mj0QPqzgYLAgYACw4SFxIOCwa&lt;/span&gt;&lt;span class="sr"&gt;/CoAECgWQA1Z/Vof5s/mz//&lt;/span&gt;&lt;span class="n"&gt;mz&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;bP7Vvto&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;r4nxzbeI9&lt;/span&gt;&lt;span class="sr"&gt;/Cyq7IjQHORANWs+Yj1iX/xrvGvNa19I3Ws/Yj1eTUSv/+sf6x/rH+sf8avx8/&lt;/span&gt;&lt;span class="n"&gt;I74&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="sr"&gt;/9CJyvbMAezOxvfUPsDYyAD/1RXVF/c9tA/Wrd0P7rX+9v/+9v72/vb/&lt;/span&gt;&lt;span class="n"&gt;X79kP2i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;J8fA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;D5c3D7&lt;/span&gt;
&lt;span class="n"&gt;HPsGAgYJDmEJAAQABhIOEhXc799SMxWDFf4X9D&lt;/span&gt;&lt;span class="sr"&gt;/DS4zvDfE/AQFYr/zvXi/8775T/pz//&lt;/span&gt;&lt;span class="n"&gt;q75s7ET&lt;/span&gt;
&lt;span class="n"&gt;EMk1W1qHFmMSF&lt;/span&gt;&lt;span class="sr"&gt;/wQ49mz3ePVY9wD1D8M/38YoAP+A/4D/gP+A/+m/7jv/8q8714DF8/&lt;/span&gt;&lt;span class="n"&gt;zHOk0Wx8d&lt;/span&gt;
&lt;span class="sr"&gt;/xRl9lcfL94bn88f33FDtnf//O//F/8X/xf/F/8k/zb/SJfxEwAAFU0LDxUc5x96/x&lt;/span&gt;&lt;span class="n"&gt;Q3nLtXfx3j&lt;/span&gt;
&lt;span class="n"&gt;H7PyJ1dzPAf7URNRGx4DG981Tw78768XPwEB&lt;/span&gt;&lt;span class="sr"&gt;/xfzO/8X/6D/sv/E//InbO+v8dQT2G/&lt;/span&gt;&lt;span class="n"&gt;Wf9&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;uFFP0&lt;/span&gt;
&lt;span class="n"&gt;kAP1U&lt;/span&gt;&lt;span class="sr"&gt;/VjnxcJMAMACf8kXf4DHycfD19L9L9/qx+j6v86/gNfFwlPFxQv/g&lt;/span&gt;&lt;span class="n"&gt;zfC4EfChQmX14HHxsA&lt;/span&gt;
&lt;span class="n"&gt;H6ADfxaAA1AjlEP&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;EzvbW&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Pc&lt;/span&gt;&lt;span class="c1"&gt;//996z8b3gOd6x3z3gMZP/+e/v+w/8L+A14DD/8s8jAHEd8vE3//&lt;/span&gt;
&lt;span class="n"&gt;DC8nkANXkxebsCuAT7YHDAMHDA8TBRgTDwwHD8oFD2n&lt;/span&gt;&lt;span class="sr"&gt;/kAP1Y/8X/xf/F/4D/yD/Msv/&lt;/span&gt;&lt;span class="n"&gt;RP4DAAB9&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;wwvEyI0&lt;/span&gt;&lt;span class="sr"&gt;/wybEA1c953zXfvxKzjDUkf/Ul/d81Z3USv/F/8X/xf/F///ov+0/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;YeA3zvgicvCjAH&lt;/span&gt;
&lt;span class="sr"&gt;/7M7HxeTK1MvHxNZw9+u0D//Xwdc59M7/xf/F/8X/xf/Iv7/NP9G/gNET/9xj4MPNP8/&lt;/span&gt;&lt;span class="n"&gt;CAgQAv&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;
&lt;span class="n"&gt;H6oUb&lt;/span&gt;&lt;span class="sr"&gt;/AfwEP/8D9v5SUzFnD/9z/L//////H/n/+x/8Mv1QMCBAABvy8XDlVj/+7///+Q/6L/tP//&lt;/span&gt;
&lt;span class="n"&gt;xv&lt;/span&gt;&lt;span class="sr"&gt;/Y/+r//P//////HP8u7/9Au9s/EwE/GvAF8BfwKf/wO/BN8F/wcfCD8JXwp/C5//DL8N3w7/&lt;/span&gt;&lt;span class="n"&gt;EB&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;RPxJfE38Un&lt;/span&gt;&lt;span class="sr"&gt;/8VvxbfF/8ZHxo/G18cfx2f/x6/H98g/yIfIz8kXyV/Jp//J78o3yn/&lt;/span&gt;&lt;span class="n"&gt;Kx8sPy1fLn&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;vn&lt;/span&gt;&lt;span class="sr"&gt;/8wvzHfMv80HzU/Nl83fzif/zm/Ot87/z0fPj8/X0B/QZ//Qr9D30T/&lt;/span&gt;&lt;span class="n"&gt;Rh9HP0hfSX9Kn89Lv0&lt;/span&gt;
&lt;span class="n"&gt;zfTf9PH1Az&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;


&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BEF88900069&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll notice &lt;code&gt;X-Wii-AppId&lt;/code&gt; changed once again alongside a new header called &lt;code&gt;X-Wii-IconNew&lt;/code&gt;, this time to match the title ID of the Wii game, DIY Showcase.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;X-Wii-IconNew&lt;/code&gt; tells the Wii System Menu that the game's channel icon has to be updated. Here, this is used to show a small envelope when you have content incoming.  &lt;/p&gt;
&lt;p&gt;The Game/Record/Comic itself is just added as an attachment to the mail. It's compressed using LZ10, a variant of the &lt;a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Storer%E2%80%93Szymanski"&gt;LZSS compression algorithm&lt;/a&gt; Nintendo likes to use in GBA/NDS games.&lt;br&gt;
Past that, it's base64-encoded, as specified in the mail's Content-Transfer-Encoding header. (base64 encoding is a classic when doing stuff with WC24)  &lt;/p&gt;
&lt;p&gt;Once again, doing this from DoujinSoft is as easy as sending mail over to the Wii console.&lt;br&gt;
&lt;img alt="gotem" src="/images/doujinsoft/dj_result.jpg"&gt;&lt;br&gt;
Man, that was a bit too easy in hindsight, wasn't it? Let's push this a bit further.  &lt;/p&gt;
&lt;h2&gt;🎁 Bonus Round: Custom Wii Message Board letters 🎁&lt;/h2&gt;
&lt;p&gt;Remember receiving cute customized letters from Nintendo or other games?&lt;br&gt;
&lt;img alt="letters" src="/images/letters.jpg"&gt;&lt;br&gt;
Games or channels, when pushing email to the Message Board, had the option to add custom data to change the envelope, the stationery used, and add a sound effect when opening the message.  &lt;/p&gt;
&lt;p&gt;This was a bit of an underused feature even back when the Wii was an active console, with most of Nintendo's own big games (Mario Galaxy, Smash Bros. Brawl) sending stuff with the default envelopes.&lt;br&gt;
Some games &lt;a href="http://www.studiousoctopus.com/?p=1229"&gt;did use it to great effect&lt;/a&gt;, and it always felt a bit special to receive a custom letter.  &lt;/p&gt;
&lt;p&gt;There's little documentation about the custom stationery, but studying &lt;a href="https://github.com/giantpune/mailboxbomb/blob/master/source/main.cpp#L173"&gt;message board exploits&lt;/a&gt; quickly shows they're just email attachments as well, similar to DIY's games. 🧐  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w2227537699606042&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rc24&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xyz&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;w7475328617225276&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rc24&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xyz&lt;/span&gt;
&lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=?&lt;/span&gt;&lt;span class="n"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;BE&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;AFkAbwB1AHIAIABnAGEAbQBlAHMAIABhAHIAZQAgAHIAZQBhAGQAeQAh&lt;/span&gt;&lt;span class="o"&gt;?=&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AppId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;354&lt;/span&gt;&lt;span class="n"&gt;E4541&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4142&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;00042019&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AltName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AEQAbwB1AGoAaQBuAFMAbwBmAHQAIABTAHQAbwByAGU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;WiiFace&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gBYAQwAuAE4AbwByAHIAaQBzAAAAAFtAgZX3KDb4KCzG7AuQaKuokFxM&lt;/span&gt;
 &lt;span class="n"&gt;BmloSrjSAIr9DiUEAFcAbwBsAHYAZQByAGkAbgBlAAA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NoReply&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="n"&gt;MIME&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mixed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boundary-NWC24-03BF040F00005&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BF040F00005&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;

&lt;span class="n"&gt;AFQAaABhAG4AawAgAHkAbwB1ACAAZgBvAHI&lt;/span&gt;&lt;span class="o"&gt;[...]&lt;/span&gt;&lt;span class="n"&gt;ACAAIAB&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;AH4AfgB&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;AH4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BF040F00005&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wii&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;msgboard&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000009&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wii&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Transfer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a0000009&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wii&lt;/span&gt;

&lt;span class="n"&gt;Vao4LQAAACAAAABxAAAAoAAAAAAAAAA&lt;/span&gt;&lt;span class="o"&gt;[...]&lt;/span&gt;&lt;span class="n"&gt;AAAAAAAAAAAAAAAAAAAA&lt;/span&gt;

&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NWC24&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="n"&gt;BF040F00005&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've cut the actual data here as this stuff is getting &lt;strong&gt;real damn long&lt;/strong&gt;, but I've added a few fun extras to demonstrate what can be done with WiiConnect24 mail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yet another &lt;code&gt;X-Wii-AppId/X-Wii-Cmd&lt;/code&gt; combo: At this point I'll admit I have no idea what this one does and just wholelifted it from messages sent by the Wii.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;X-Wii-AltName&lt;/code&gt; allows you to show a name of your choice on the envelope instead of the name the Wii gave your friend number; Useful for us as DoujinSoft is a &lt;em&gt;household name&lt;/em&gt;, god dang it!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X-WiiFace&lt;/code&gt; is a base64 encoded Mii, that appears on the upper-left side of the envelope. This works for regular and custom envelopes without a hitch: In fact the Wii gives exactly &lt;strong&gt;zero fucks&lt;/strong&gt; what your custom graphics are and will draw on top of it relentlessly.&lt;br&gt;
&lt;img alt="lookin cool" src="images/doujinsoft/wiimb_glitch.jpg"&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X-Wii-MB-NoReply&lt;/code&gt; disables the "Reply" button for this message.&lt;/li&gt;
&lt;li&gt;And the final piece, the custom stationery, is stored as an attachment with Content-Type &lt;code&gt;x-wii-msgboard&lt;/code&gt;. The graphics themselves are wrapped in a &lt;a href="http://wiibrew.org/wiki/U8_archive"&gt;U8 archive&lt;/a&gt;(crazy how many file formats you only ever encounter when dealing with Nintendo stuff), and base64-encoded as per the norm.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result looks like this!&lt;br&gt;
&lt;img alt="letter" src="/images/doujinsoft/wiimb_custom1.jpg"&gt;&lt;br&gt;
&lt;img alt="stationery" src="/images/doujinsoft/wiimb_custom2.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Really gives us that fun, almost-official flair.  &lt;/p&gt;
&lt;h2&gt;Final spare thoughts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The envelope notifications from &lt;code&gt;X-Wii-IconNew&lt;/code&gt; take region into account, unlike(thankfully) everything else: DoujinSoft's emails are sent using the US title ID, so other regions sadly miss out on the envelope icon for their channel.&lt;br&gt;
Luckily, the bonus custom letters kinda mitigate that by acting as a notification.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LZ10 compression turned out to be a bitch to find proper implementations for; I used &lt;a href="http://www.romhacking.net/utilities/826/"&gt;a C library&lt;/a&gt; which I compiled and bound to the Java code using JNA, turning the DoujinSoft server into an even bigger Frankenstein's monster. 👍  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I might write a second, clean server to collect emails from users when I get around to implementing survey box responses and games sent to the store from users' Wiis.  &lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiibrew.org/wiki//shared2/wc24/mbox"&gt;Wiibrew's breakdown of WC24 email&lt;/a&gt;&lt;br&gt;
&lt;a href="https://wiibrew.org/wiki/WiiConnect24/WC24_Content"&gt;More WC24 details from Wiibrew&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bigredpimp.wordpress.com/2008/01/22/more-wii-message-header-fun/"&gt;Wii mail headers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/RiiConnect24/WMB-Letterhead"&gt;All the official stationery, ripped by RiiConnect24.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://drive.google.com/drive/folders/0B7vPmuZfN3sndnRVNmJ4amw5Mms"&gt;Said stationery in decoded image form if you just want to take a look&lt;/a&gt;&lt;/p&gt;</content><category term="Software"></category><category term="java"></category><category term="nintendo"></category><category term="wii"></category><category term="wiiconnect24"></category><category term="riiconnect24"></category><category term="warioware"></category><category term="doujinsoft"></category><category term="mio"></category></entry><entry><title>DoujinSoft 2.0 - now with extra RiiConnecting</title><link href="https://tvc-16.science/doujinsoft-2.html" rel="alternate"></link><published>2019-07-07T00:00:00+02:00</published><updated>2019-07-07T00:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2019-07-07:/doujinsoft-2.html</id><summary type="html">&lt;p&gt;We have to go back... to WiiConnect24!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Remember &lt;a href="https://en.wikipedia.org/wiki/WarioWare_D.I.Y."&gt;WarioWare D.I.Y&lt;/a&gt;? The Nintendo DS game for making WarioWare-style microgames.&lt;br&gt;
It's turning 10 this year and stands as, in my opinion, the best in Nintendo's "&lt;em&gt;wacky user-generated content with that weird &lt;a href="https://www.youtube.com/watch?v=q_Yd2gn37AM"&gt;baby face good lord what is that&lt;/a&gt;&lt;/em&gt;" series.  (Alongside other grands like Mario Paint and both Mario Maker games)  &lt;/p&gt;
&lt;p&gt;I launched &lt;a href="https://diy.tvc-16.science/"&gt;the DoujinSoft Store/Archiver&lt;/a&gt; two years ago as a way to easily catalogue all the content created with the game. It's a pretty obvious rip-off of the &lt;a href="https://supermariomakerbookmark.nintendo.net"&gt;Mario Maker Bookmark Site&lt;/a&gt;, to stay in-theme.  &lt;/p&gt;
&lt;p&gt;As-is, it's a good archive of all the stuff people made back in the day, but there wasn't an easy way to play the games, save from injecting them yourself into a savefile for the DS Game. Ditto for sharing newly made games with other people.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pretty tongue-in-cheek there game" src="images/doujinsoft/showcase.png"&gt;&lt;br&gt;
DIY had a matching game on the Wii, WarioWare DIY Showcase, which acted as extra storage for your DS Games, alongside a few other things. Namely, the possibility to &lt;em&gt;send/receive games&lt;/em&gt; from Wii friends.  &lt;/p&gt;
&lt;p&gt;I was approached recently by the good folks at &lt;a href="https://rc24.xyz/"&gt;RiiConnect24&lt;/a&gt;, who'd figured out how this part worked.&lt;br&gt;
Cue a bit of jolly co-operation, and I'm happy to present &lt;strong&gt;DoujinSoft 2.0&lt;/strong&gt;, now featuring:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A complete dump of the content that was available on the Nintendo Wi-Fi Connection before its closure:&lt;br&gt;
That's around &lt;h2&gt;&lt;em&gt;185 233‬&lt;/em&gt;&lt;/h2&gt; Games/Music/Comics you can peruse! They're all pretty small so thankfully it compresses well 👀💦  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RiiConnect24&lt;/strong&gt; integration, allowing you to choose games on the storefront and get them &lt;strong&gt;directly&lt;/strong&gt; shipped to your Wii system.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="look at that swanky modal" src="images/doujinsoft/djsoft2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;You'll also get nice custom letters on your Wii Message Board if you use the feature!&lt;br&gt;
(Well technically they're the old ones from the Wii Shop Channel &lt;sup&gt;but personally I was only gifted a game once so it's not like I saw them that often&lt;/sup&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="stationery" src="/images/doujinsoft/wiimb_custom2.jpg"&gt;  &lt;/p&gt;
&lt;h2&gt;What's next for DoujinSoft 3.0&lt;/h2&gt;
&lt;p&gt;I'm doing the giving, so I might as well start doing the receiving!&lt;br&gt;
DIY Showcase allows players to rate the games they receive, so there's a fun integration to be made here.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="surveyin" src="/images/doujinsoft/survey.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Past that, it only makes sense that users would be able to send/upload their own games to DoujinSoft using their Wii consoles. It'd almost make us look like a proper online service!  &lt;/p&gt;
&lt;h2&gt;The technical breakdown&lt;/h2&gt;
&lt;p&gt;&lt;img alt="cool pic" src="/images/doujinsoft/rc24.png"&gt;&lt;/p&gt;
&lt;p&gt;Since this is a tech blog, if you're interested in how WiiConnect24 ticks I've written &lt;a href="./doujinsoft-rc24.html"&gt;a fair bit about what I learned here.&lt;/a&gt; Thanks for reading, and have fun using DoujinSoft!&lt;/p&gt;</content><category term="Software"></category><category term="nintendo"></category><category term="wii"></category><category term="wiiconnect24"></category><category term="riiconnect24"></category><category term="warioware"></category><category term="doujinsoft"></category><category term="mio"></category></entry><entry><title>Building this blog with Pelican, Github Actions and Caddy</title><link href="https://tvc-16.science/blogopolis-docker.html" rel="alternate"></link><published>2019-04-25T22:00:00+02:00</published><updated>2019-04-25T22:00:00+02:00</updated><author><name>Difegue</name></author><id>tag:tvc-16.science,2019-04-25:/blogopolis-docker.html</id><summary type="html">&lt;p&gt;Writing this also allows me to check that this continuous integration thingamabob is working as expected.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The original, blogless iteration of TVC-16 was hosted on a bog-standard Apache2 server.&lt;br&gt;
&lt;a href="https://lrr.tvc-16.science"&gt;My&lt;/a&gt; &lt;a href="https://diy.tvc-16.science"&gt;subdomains&lt;/a&gt; are all directly linked to Docker containers, so that very basic configuration was enough.  &lt;/p&gt;
&lt;p&gt;For blog articles though, I wanted to have something easier on the server maintenance than having to copy my html by hand. I originally considered using &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; in yet another Docker container and doing all my writing in it, but it'd eventually be a pain to export/reimport all the data in case of a server switch.  &lt;/p&gt;
&lt;p&gt;I decided to use a static site generator like all the nerds instead and went with &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Classic stuff so far, but I don't think many people are using &lt;a href="https://github.com/features/actions/"&gt;Github Actions&lt;/a&gt; for their deploying yet despite the fact that it's &lt;strong&gt;rad&lt;/strong&gt;! &lt;sub&gt;&lt;sup&gt;well the fact it's in beta might be a blocker too for some people&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;h1&gt;Building in Pelican&lt;/h1&gt;
&lt;p&gt;I didn't do anything out of the ordinary in the Pelican side -- this is a hella standard blog if you ignore the theme. (Which I wholelifted from the previous nonblog version, so I can thank 2018 myself for putting in all the CSS work).  &lt;/p&gt;
&lt;p&gt;The uptime counter at the end is still generated by a crontab on the server itself and dumped to a textfile, which is just read by the JS of the website:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;* * * * * uptime | awk -F&amp;#39;( |,|:)+&amp;#39; &amp;#39;{print $6,$7}&amp;#39; &amp;gt; /var/www/html/uptime&lt;/span&gt;
&lt;span class="err"&gt;* * * * * uptime | awk -F&amp;#39;( |,|:)+&amp;#39; &amp;#39;{print $6,$7&amp;quot;,&amp;quot;,$8,&amp;quot;hours,&amp;quot;,$9,&amp;quot;minutes.&amp;quot;}&amp;#39; &amp;gt; /var/www/html/uptimedetail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nothing wrong with a bit of Unix philosophy every now and then.  &lt;/p&gt;
&lt;p&gt;The only thing I did with Pelican that's kinda obscure unless you read the configuration file specs is having a custom template render to a custom page (the Projects):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# custom page generated with a jinja2 template&lt;/span&gt;
&lt;span class="err"&gt;TEMPLATE_PAGES = {&amp;#39;projects.html&amp;#39;: &amp;#39;projects.html&amp;#39;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I dropped the entire Pelican sources into a &lt;a href="https://github.com/Difegue/TVC-16"&gt;Github repo&lt;/a&gt;, and now it's on to the fun part:&lt;/p&gt;
&lt;h1&gt;Hot Github integrations&lt;/h1&gt;
&lt;p&gt;I already have some experience in GH Actions from writing the test suite for &lt;a href="https://github.com/Difegue/LANraragi"&gt;LANraragi&lt;/a&gt;, so I was expecting the setup time for this to be fairly quick. Turns out it went faster than expected!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="hot github actions near your town" src="https://tvc-16.science/images/tvc-16-actions.png"&gt;  &lt;/p&gt;
&lt;p&gt;This building process is triggered on every push to &lt;em&gt;master&lt;/em&gt; and is as simple as it looks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Run Pelican on the repo to build the website. This is &lt;a href="https://github.com/Difegue/TVC-16/tree/master/.github/action-pelican"&gt;super basic&lt;/a&gt;, I'm just grabbing a pelican docker image and building away.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Force-push the built &lt;em&gt;output&lt;/em&gt; folder to the &lt;em&gt;gh-pages&lt;/em&gt; branch of the repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The output branch is named &lt;em&gt;gh-pages&lt;/em&gt; because I conveniently re-used an &lt;a href="https://github.com/JasonEtco/push-to-gh-pages"&gt;existing Action&lt;/a&gt; to go faster. I don't actually use Github Pages but hey, no harm done!&lt;/p&gt;
&lt;p&gt;🔮 Another integration I made is with the comment system: The way Microsoft made its MSDN comment system &lt;a href="https://docs.microsoft.com/en-us/teamblog/a-new-feedback-system-is-coming-to-docs"&gt;basically just Github Issues&lt;/a&gt; is pretty inspiring.&lt;br&gt;
&lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt; is an open source variant I added to my Pelican template in about 5 seconds.  &lt;/p&gt;
&lt;p&gt;As a result, both articles and comments are backed up on Github. If I ever have to switch to another Git repo provider I'd likely lose the comments, but I'm banking on those not being too important.&lt;/p&gt;
&lt;h1&gt;Deploying on TVC-16 through Caddy&lt;/h1&gt;
&lt;p&gt;A friend recently told me that I was being an old fart by still using Apache2 in &lt;em&gt;the current year&lt;/em&gt;, so I swapped it out for &lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt;.&lt;br&gt;
Caddy's big advantage here lies in its &lt;a href="https://caddyserver.com/docs/http.git"&gt;&lt;code&gt;http.git&lt;/code&gt;&lt;/a&gt; plugin, which automagically pulls the latest built version of the website from Github.  &lt;/p&gt;
&lt;p&gt;Here's the Caddyfile I use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;tvc-16.science, www.tvc-16.science {&lt;/span&gt;
&lt;span class="err"&gt;    root /var/www/html&lt;/span&gt;
&lt;span class="err"&gt;    git {&lt;/span&gt;
&lt;span class="err"&gt;        repo     github.com/difegue/TVC-16&lt;/span&gt;
&lt;span class="err"&gt;        branch   gh-pages&lt;/span&gt;
&lt;span class="err"&gt;        pull-args --allow-unrelated-histories -s recursive -X theirs&lt;/span&gt;
&lt;span class="err"&gt;        hook /webhook mywebhooksecret&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When adding in the webhook on the Github side, make sure to set the Content-Type to &lt;code&gt;application/json&lt;/code&gt;, your hooks will fail otherwise.&lt;/p&gt;
&lt;p&gt;The biggest issue I encountered here was that http.git does a &lt;code&gt;git clone&lt;/code&gt; when deploying your website for the first time, then only does &lt;code&gt;git pull&lt;/code&gt; to update it. Which is very sane if you're pulling the sources, then building the website on the server itself.  &lt;/p&gt;
&lt;p&gt;What I'm pulling however is the already-built website, which is force-pushed by the Github Actions bot every time. As such, the Git history is getting continuously broken, making regular Git pulls fail instantly.&lt;/p&gt;
&lt;p&gt;Adding the pull arguments you see above fixes this, by telling Git to disregard history and always use remote files in case of conflict.&lt;/p&gt;
&lt;h1&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;I found out about the &lt;a href="https://api.github.com/zen"&gt;Github Zen endpoint&lt;/a&gt; when adding in webhooks. It just spits out fortune cookie sentences on each call.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12/06 Edit:&lt;/strong&gt; While it's not very well documented, you can add custom metadata to your markdown pages and put it to work in Pelican's templates.&lt;br&gt;
I wanted to change the OpenGraph image for each blogpost to a specific one for better &lt;code&gt;social media presence&lt;/code&gt;, so I easily added a &lt;code&gt;HeroImage&lt;/code&gt; property to my articles:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;cool&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;retro&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Windows&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;WSL&lt;/span&gt;
&lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Difegue&lt;/span&gt;
&lt;span class="n"&gt;HeroImage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jpg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And used it in my template.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:image&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ article.heroimage }}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Good stuff all around!&lt;/p&gt;</content><category term="Software"></category><category term="docker"></category><category term="pelican"></category><category term="caddy"></category><category term="github actions"></category></entry></feed>